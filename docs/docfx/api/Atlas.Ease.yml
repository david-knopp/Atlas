### YamlMime:ManagedReference
items:
- uid: Atlas.Ease
  commentId: T:Atlas.Ease
  id: Ease
  parent: Atlas
  children:
  - Atlas.Ease.Evaluate(System.Single,System.Single)
  - Atlas.Ease.Interpolate(System.Single,System.Single,System.Single)
  - Atlas.Ease.Interpolate(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)
  - Atlas.Ease.Interpolate(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - Atlas.Ease.Interpolate(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
  - Atlas.Ease.OnAfterDeserialize
  - Atlas.Ease.OnBeforeSerialize
  - Atlas.Ease.Type
  langs:
  - csharp
  - vb
  name: Ease
  nameWithType: Ease
  fullName: Atlas.Ease
  type: Class
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Ease
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 8
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nA serializable class for simplifying easing/tweening workflow\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public sealed class Ease : ISerializationCallbackReceiver
    content.vb: >-
      <Serializable>

      Public NotInheritable Class Ease
          Implements ISerializationCallbackReceiver
  inheritance:
  - System.Object
  implements:
  - UnityEngine.ISerializationCallbackReceiver
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Atlas.Ease.Type
  commentId: P:Atlas.Ease.Type
  id: Type
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Ease.Type
  fullName: Atlas.Ease.Type
  type: Property
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Type
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 15
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nType of ease function to use when evaluating\n"
  example: []
  syntax:
    content: public EaseType Type { get; set; }
    parameters: []
    return:
      type: Atlas.EaseType
    content.vb: Public Property Type As EaseType
  overload: Atlas.Ease.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Atlas.Ease.Evaluate(System.Single,System.Single)
  commentId: M:Atlas.Ease.Evaluate(System.Single,System.Single)
  id: Evaluate(System.Single,System.Single)
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: Evaluate(Single, Single)
  nameWithType: Ease.Evaluate(Single, Single)
  fullName: Atlas.Ease.Evaluate(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Evaluate
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 31
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nCalculates the eased value of <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>\n"
  example: []
  syntax:
    content: public float Evaluate(float t, float duration = 1F)
    parameters:
    - id: t
      type: System.Single
      description: The time value to evaluate at
    - id: duration
      type: System.Single
      description: The duration of this ease
    return:
      type: System.Single
      description: The eased value
    content.vb: Public Function Evaluate(t As Single, duration As Single = 1F) As Single
  overload: Atlas.Ease.Evaluate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Ease.Interpolate(System.Single,System.Single,System.Single)
  commentId: M:Atlas.Ease.Interpolate(System.Single,System.Single,System.Single)
  id: Interpolate(System.Single,System.Single,System.Single)
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: Interpolate(Single, Single, Single)
  nameWithType: Ease.Interpolate(Single, Single, Single)
  fullName: Atlas.Ease.Interpolate(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Interpolate
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 44
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nEases between the two given float values at time <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>\n"
  example: []
  syntax:
    content: public float Interpolate(float from, float to, float t)
    parameters:
    - id: from
      type: System.Single
      description: Initial value
    - id: to
      type: System.Single
      description: Final value
    - id: t
      type: System.Single
      description: The time value to evaluate at, normalized to [0, 1]
    return:
      type: System.Single
      description: The eased value
    content.vb: Public Function Interpolate(from As Single, to As Single, t As Single) As Single
  overload: Atlas.Ease.Interpolate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Ease.Interpolate(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
  commentId: M:Atlas.Ease.Interpolate(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
  id: Interpolate(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: Interpolate(Vector3, Vector3, Single)
  nameWithType: Ease.Interpolate(Vector3, Vector3, Single)
  fullName: Atlas.Ease.Interpolate(UnityEngine.Vector3, UnityEngine.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Interpolate
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 57
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nEases between two given <xref href=\"UnityEngine.Vector3\" data-throw-if-not-resolved=\"false\"></xref> values at time <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>\n"
  example: []
  syntax:
    content: public Vector3 Interpolate(Vector3 from, Vector3 to, float t)
    parameters:
    - id: from
      type: UnityEngine.Vector3
      description: Initial value
    - id: to
      type: UnityEngine.Vector3
      description: Final value
    - id: t
      type: System.Single
      description: The time value to evaluate at, normalized to [0, 1]
    return:
      type: UnityEngine.Vector3
      description: The eased value
    content.vb: Public Function Interpolate(from As Vector3, to As Vector3, t As Single) As Vector3
  overload: Atlas.Ease.Interpolate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Ease.Interpolate(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:Atlas.Ease.Interpolate(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: Interpolate(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: Interpolate(Vector2, Vector2, Single)
  nameWithType: Ease.Interpolate(Vector2, Vector2, Single)
  fullName: Atlas.Ease.Interpolate(UnityEngine.Vector2, UnityEngine.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Interpolate
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 70
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nEases between two given <xref href=\"UnityEngine.Vector2\" data-throw-if-not-resolved=\"false\"></xref> values at time <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>\n"
  example: []
  syntax:
    content: public Vector2 Interpolate(Vector2 from, Vector2 to, float t)
    parameters:
    - id: from
      type: UnityEngine.Vector2
      description: Initial value
    - id: to
      type: UnityEngine.Vector2
      description: Final value
    - id: t
      type: System.Single
      description: The time value to evaluate at, normalized to [0, 1]
    return:
      type: UnityEngine.Vector2
      description: The eased value
    content.vb: Public Function Interpolate(from As Vector2, to As Vector2, t As Single) As Vector2
  overload: Atlas.Ease.Interpolate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Ease.Interpolate(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)
  commentId: M:Atlas.Ease.Interpolate(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)
  id: Interpolate(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: Interpolate(Quaternion, Quaternion, Single)
  nameWithType: Ease.Interpolate(Quaternion, Quaternion, Single)
  fullName: Atlas.Ease.Interpolate(UnityEngine.Quaternion, UnityEngine.Quaternion, System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Interpolate
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 83
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nEases between two given <xref href=\"UnityEngine.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> values at time <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>\n"
  example: []
  syntax:
    content: public Quaternion Interpolate(Quaternion from, Quaternion to, float t)
    parameters:
    - id: from
      type: UnityEngine.Quaternion
      description: Initial value
    - id: to
      type: UnityEngine.Quaternion
      description: Final value
    - id: t
      type: System.Single
      description: The time value to evaluate at, normalized to [0, 1]
    return:
      type: UnityEngine.Quaternion
      description: The eased value
    content.vb: Public Function Interpolate(from As Quaternion, to As Quaternion, t As Single) As Quaternion
  overload: Atlas.Ease.Interpolate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Ease.OnBeforeSerialize
  commentId: M:Atlas.Ease.OnBeforeSerialize
  id: OnBeforeSerialize
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: OnBeforeSerialize()
  nameWithType: Ease.OnBeforeSerialize()
  fullName: Atlas.Ease.OnBeforeSerialize()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: OnBeforeSerialize
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 90
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  syntax:
    content: public void OnBeforeSerialize()
    content.vb: Public Sub OnBeforeSerialize
  overload: Atlas.Ease.OnBeforeSerialize*
  implements:
  - UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Ease.OnAfterDeserialize
  commentId: M:Atlas.Ease.OnAfterDeserialize
  id: OnAfterDeserialize
  parent: Atlas.Ease
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize()
  nameWithType: Ease.OnAfterDeserialize()
  fullName: Atlas.Ease.OnAfterDeserialize()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Math/Easing/Ease.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: OnAfterDeserialize
    path: ../../Assets/Scripts/Runtime/Math/Easing/Ease.cs
    startLine: 94
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  syntax:
    content: public void OnAfterDeserialize()
    content.vb: Public Sub OnAfterDeserialize
  overload: Atlas.Ease.OnAfterDeserialize*
  implements:
  - UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Atlas
  commentId: N:Atlas
  name: Atlas
  nameWithType: Atlas
  fullName: Atlas
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.ISerializationCallbackReceiver
  commentId: T:UnityEngine.ISerializationCallbackReceiver
  parent: UnityEngine
  isExternal: true
  name: ISerializationCallbackReceiver
  nameWithType: ISerializationCallbackReceiver
  fullName: UnityEngine.ISerializationCallbackReceiver
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Atlas.Ease.Type*
  commentId: Overload:Atlas.Ease.Type
  name: Type
  nameWithType: Ease.Type
  fullName: Atlas.Ease.Type
- uid: Atlas.EaseType
  commentId: T:Atlas.EaseType
  parent: Atlas
  name: EaseType
  nameWithType: EaseType
  fullName: Atlas.EaseType
- uid: Atlas.Ease.Evaluate*
  commentId: Overload:Atlas.Ease.Evaluate
  name: Evaluate
  nameWithType: Ease.Evaluate
  fullName: Atlas.Ease.Evaluate
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Atlas.Ease.Interpolate*
  commentId: Overload:Atlas.Ease.Interpolate
  name: Interpolate
  nameWithType: Ease.Interpolate
  fullName: Atlas.Ease.Interpolate
- uid: UnityEngine.Vector3
  commentId: T:UnityEngine.Vector3
  parent: UnityEngine
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: UnityEngine.Quaternion
  commentId: T:UnityEngine.Quaternion
  parent: UnityEngine
  isExternal: true
  name: Quaternion
  nameWithType: Quaternion
  fullName: UnityEngine.Quaternion
- uid: Atlas.Ease.OnBeforeSerialize*
  commentId: Overload:Atlas.Ease.OnBeforeSerialize
  name: OnBeforeSerialize
  nameWithType: Ease.OnBeforeSerialize
  fullName: Atlas.Ease.OnBeforeSerialize
- uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  commentId: M:UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  parent: UnityEngine.ISerializationCallbackReceiver
  isExternal: true
  name: OnBeforeSerialize()
  nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize()
  fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
  spec.csharp:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Atlas.Ease.OnAfterDeserialize*
  commentId: Overload:Atlas.Ease.OnAfterDeserialize
  name: OnAfterDeserialize
  nameWithType: Ease.OnAfterDeserialize
  fullName: Atlas.Ease.OnAfterDeserialize
- uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  commentId: M:UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  parent: UnityEngine.ISerializationCallbackReceiver
  isExternal: true
  name: OnAfterDeserialize()
  nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize()
  fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
  spec.csharp:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
