### YamlMime:ManagedReference
items:
- uid: Atlas.SingletonBehavior`1
  commentId: T:Atlas.SingletonBehavior`1
  id: SingletonBehavior`1
  parent: Atlas
  children:
  - Atlas.SingletonBehavior`1.Awake
  - Atlas.SingletonBehavior`1.HasInstance
  - Atlas.SingletonBehavior`1.Instance
  - Atlas.SingletonBehavior`1.OnDestroy
  langs:
  - csharp
  - vb
  name: SingletonBehavior<TDerived>
  nameWithType: SingletonBehavior<TDerived>
  fullName: Atlas.SingletonBehavior<TDerived>
  type: Class
  source:
    remote:
      path: Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
      branch: v0.9.4
      repo: https://github.com/david-knopp/Atlas
    id: SingletonBehavior
    path: ../../Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
    startLine: 10
  assemblies:
  - Assembly-CSharp
  namespace: Atlas
  summary: "\nBase class that applies the singleton design pattern to a <xref href=\"UnityEngine.MonoBehaviour\" data-throw-if-not-resolved=\"false\"></xref>,\nproviding a shared instance of the given type\n"
  example: []
  syntax:
    content: 'public abstract class SingletonBehavior<TDerived> : MonoBehaviour where TDerived : MonoBehaviour'
    typeParameters:
    - id: TDerived
      description: Type of the derived class
    content.vb: >-
      Public MustInherit Class SingletonBehavior(Of TDerived As MonoBehaviour)
          Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  derivedClasses:
  - Atlas.DebugDraw
  - Atlas.GUIListener
  nameWithType.vb: SingletonBehavior(Of TDerived)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Atlas.SingletonBehavior(Of TDerived)
  name.vb: SingletonBehavior(Of TDerived)
- uid: Atlas.SingletonBehavior`1.HasInstance
  commentId: P:Atlas.SingletonBehavior`1.HasInstance
  id: HasInstance
  parent: Atlas.SingletonBehavior`1
  langs:
  - csharp
  - vb
  name: HasInstance
  nameWithType: SingletonBehavior<TDerived>.HasInstance
  fullName: Atlas.SingletonBehavior<TDerived>.HasInstance
  type: Property
  source:
    remote:
      path: Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
      branch: v0.9.4
      repo: https://github.com/david-knopp/Atlas
    id: HasInstance
    path: ../../Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Atlas
  summary: "\nWhether or not an instance exists. Since destruction order isn&apos;t guaranteed in Unity,\nit&apos;s recommended to reference this property when accessing singletons in shutdown\nmethods such as OnDestroy\n"
  example: []
  syntax:
    content: public static bool HasInstance { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property HasInstance As Boolean
  overload: Atlas.SingletonBehavior`1.HasInstance*
  nameWithType.vb: SingletonBehavior(Of TDerived).HasInstance
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).HasInstance
- uid: Atlas.SingletonBehavior`1.Instance
  commentId: P:Atlas.SingletonBehavior`1.Instance
  id: Instance
  parent: Atlas.SingletonBehavior`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: SingletonBehavior<TDerived>.Instance
  fullName: Atlas.SingletonBehavior<TDerived>.Instance
  type: Property
  source:
    remote:
      path: Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
      branch: v0.9.4
      repo: https://github.com/david-knopp/Atlas
    id: Instance
    path: ../../Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
    startLine: 32
  assemblies:
  - Assembly-CSharp
  namespace: Atlas
  summary: "\nThe instance of the class. If an instance does not yet exist, an attempt will be made to find\none using <xref href=\"UnityEngine.Object.FindObjectOfType%60%601\" data-throw-if-not-resolved=\"false\"></xref>. If an instance is still\nnot found, an <xref href=\"UnityEngine.GameObject\" data-throw-if-not-resolved=\"false\"></xref> will be instantiated with the desired class instance \nattached.\n"
  example: []
  syntax:
    content: public static TDerived Instance { get; }
    parameters: []
    return:
      type: '{TDerived}'
    content.vb: Public Shared ReadOnly Property Instance As TDerived
  overload: Atlas.SingletonBehavior`1.Instance*
  nameWithType.vb: SingletonBehavior(Of TDerived).Instance
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).Instance
- uid: Atlas.SingletonBehavior`1.Awake
  commentId: M:Atlas.SingletonBehavior`1.Awake
  id: Awake
  parent: Atlas.SingletonBehavior`1
  langs:
  - csharp
  - vb
  name: Awake()
  nameWithType: SingletonBehavior<TDerived>.Awake()
  fullName: Atlas.SingletonBehavior<TDerived>.Awake()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
      branch: v0.9.4
      repo: https://github.com/david-knopp/Atlas
    id: Awake
    path: ../../Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
    startLine: 56
  assemblies:
  - Assembly-CSharp
  namespace: Atlas
  syntax:
    content: protected virtual void Awake()
    content.vb: Protected Overridable Sub Awake
  overload: Atlas.SingletonBehavior`1.Awake*
  nameWithType.vb: SingletonBehavior(Of TDerived).Awake()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).Awake()
- uid: Atlas.SingletonBehavior`1.OnDestroy
  commentId: M:Atlas.SingletonBehavior`1.OnDestroy
  id: OnDestroy
  parent: Atlas.SingletonBehavior`1
  langs:
  - csharp
  - vb
  name: OnDestroy()
  nameWithType: SingletonBehavior<TDerived>.OnDestroy()
  fullName: Atlas.SingletonBehavior<TDerived>.OnDestroy()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
      branch: v0.9.4
      repo: https://github.com/david-knopp/Atlas
    id: OnDestroy
    path: ../../Assets/Scripts/Runtime/Framework/SingletonBehavior.cs
    startLine: 66
  assemblies:
  - Assembly-CSharp
  namespace: Atlas
  syntax:
    content: protected virtual void OnDestroy()
    content.vb: Protected Overridable Sub OnDestroy
  overload: Atlas.SingletonBehavior`1.OnDestroy*
  nameWithType.vb: SingletonBehavior(Of TDerived).OnDestroy()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).OnDestroy()
references:
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: Atlas
  commentId: N:Atlas
  name: Atlas
  nameWithType: Atlas
  fullName: Atlas
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Atlas.SingletonBehavior`1.HasInstance*
  commentId: Overload:Atlas.SingletonBehavior`1.HasInstance
  name: HasInstance
  nameWithType: SingletonBehavior<TDerived>.HasInstance
  fullName: Atlas.SingletonBehavior<TDerived>.HasInstance
  nameWithType.vb: SingletonBehavior(Of TDerived).HasInstance
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).HasInstance
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: UnityEngine.Object.FindObjectOfType``1
  commentId: M:UnityEngine.Object.FindObjectOfType``1
  isExternal: true
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  isExternal: true
- uid: Atlas.SingletonBehavior`1.Instance*
  commentId: Overload:Atlas.SingletonBehavior`1.Instance
  name: Instance
  nameWithType: SingletonBehavior<TDerived>.Instance
  fullName: Atlas.SingletonBehavior<TDerived>.Instance
  nameWithType.vb: SingletonBehavior(Of TDerived).Instance
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).Instance
- uid: '{TDerived}'
  commentId: '!:TDerived'
  definition: TDerived
  name: TDerived
  nameWithType: TDerived
  fullName: TDerived
- uid: TDerived
  commentId: '!:TDerived'
  name: TDerived
  nameWithType: TDerived
  fullName: TDerived
- uid: Atlas.SingletonBehavior`1.Awake*
  commentId: Overload:Atlas.SingletonBehavior`1.Awake
  name: Awake
  nameWithType: SingletonBehavior<TDerived>.Awake
  fullName: Atlas.SingletonBehavior<TDerived>.Awake
  nameWithType.vb: SingletonBehavior(Of TDerived).Awake
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).Awake
- uid: Atlas.SingletonBehavior`1.OnDestroy*
  commentId: Overload:Atlas.SingletonBehavior`1.OnDestroy
  name: OnDestroy
  nameWithType: SingletonBehavior<TDerived>.OnDestroy
  fullName: Atlas.SingletonBehavior<TDerived>.OnDestroy
  nameWithType.vb: SingletonBehavior(Of TDerived).OnDestroy
  fullName.vb: Atlas.SingletonBehavior(Of TDerived).OnDestroy
