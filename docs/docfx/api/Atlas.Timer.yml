### YamlMime:ManagedReference
items:
- uid: Atlas.Timer
  commentId: T:Atlas.Timer
  id: Timer
  parent: Atlas
  children:
  - Atlas.Timer.#ctor(Atlas.TimeScale)
  - Atlas.Timer.Elapsed
  - Atlas.Timer.HasElapsed(System.Single)
  - Atlas.Timer.IsPaused
  - Atlas.Timer.IsTiming
  - Atlas.Timer.Pause
  - Atlas.Timer.Start
  - Atlas.Timer.Start(System.Single)
  - Atlas.Timer.Stop
  - Atlas.Timer.Unpause
  langs:
  - csharp
  - vb
  name: Timer
  nameWithType: Timer
  fullName: Atlas.Timer
  type: Struct
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Timer
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 7
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nProvides a simple interface for measuring elapsed time in seconds\n"
  example: []
  syntax:
    content: public struct Timer
    content.vb: Public Structure Timer
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Atlas.Timer.#ctor(Atlas.TimeScale)
  commentId: M:Atlas.Timer.#ctor(Atlas.TimeScale)
  id: '#ctor(Atlas.TimeScale)'
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Timer(TimeScale)
  nameWithType: Timer.Timer(TimeScale)
  fullName: Atlas.Timer.Timer(Atlas.TimeScale)
  type: Constructor
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: .ctor
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 14
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public Timer(TimeScale scale = TimeScale.Scaled)
    parameters:
    - id: scale
      type: Atlas.TimeScale
      description: Target time scale to &quot;tick&quot; with
    content.vb: Public Sub New(scale As TimeScale = TimeScale.Scaled)
  overload: Atlas.Timer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Timer.Elapsed
  commentId: P:Atlas.Timer.Elapsed
  id: Elapsed
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Elapsed
  nameWithType: Timer.Elapsed
  fullName: Atlas.Timer.Elapsed
  type: Property
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Elapsed
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 27
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nAmount of time that has elapsed (in seconds) since <xref href=\"Atlas.Timer.Start\" data-throw-if-not-resolved=\"false\"></xref> was last \ncalled, or 0 if it the timer has not been started\n<remark>When the timer is paused, the return value will be the amount of time \nmeasured before <xref href=\"Atlas.Timer.Pause\" data-throw-if-not-resolved=\"false\"></xref> was called</remark>\n"
  example: []
  syntax:
    content: public float Elapsed { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Elapsed As Single
  overload: Atlas.Timer.Elapsed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Atlas.Timer.IsPaused
  commentId: P:Atlas.Timer.IsPaused
  id: IsPaused
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: IsPaused
  nameWithType: Timer.IsPaused
  fullName: Atlas.Timer.IsPaused
  type: Property
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: IsPaused
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 49
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nWhether or not the timer is currently paused\n"
  example: []
  syntax:
    content: public bool IsPaused { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPaused As Boolean
  overload: Atlas.Timer.IsPaused*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Atlas.Timer.IsTiming
  commentId: P:Atlas.Timer.IsTiming
  id: IsTiming
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: IsTiming
  nameWithType: Timer.IsTiming
  fullName: Atlas.Timer.IsTiming
  type: Property
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: IsTiming
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 57
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nWhether or not the timer is currently measuring time\n"
  example: []
  syntax:
    content: public bool IsTiming { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsTiming As Boolean
  overload: Atlas.Timer.IsTiming*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Atlas.Timer.Start
  commentId: M:Atlas.Timer.Start
  id: Start
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Timer.Start()
  fullName: Atlas.Timer.Start()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Start
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 69
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nStarts timing\n"
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: Atlas.Timer.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Timer.Start(System.Single)
  commentId: M:Atlas.Timer.Start(System.Single)
  id: Start(System.Single)
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Start(Single)
  nameWithType: Timer.Start(Single)
  fullName: Atlas.Timer.Start(System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Start
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 79
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nStarts timing, but starts at the given time offset instead of 0\n"
  example: []
  syntax:
    content: public void Start(float timeOffset)
    parameters:
    - id: timeOffset
      type: System.Single
      description: Amount of time to start offset by
    content.vb: Public Sub Start(timeOffset As Single)
  overload: Atlas.Timer.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Timer.Stop
  commentId: M:Atlas.Timer.Stop
  id: Stop
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: Atlas.Timer.Stop()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Stop
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 88
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nStops timing\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: Atlas.Timer.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Timer.Pause
  commentId: M:Atlas.Timer.Pause
  id: Pause
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: Timer.Pause()
  fullName: Atlas.Timer.Pause()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Pause
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 97
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nPauses timing\n"
  example: []
  syntax:
    content: public void Pause()
    content.vb: Public Sub Pause
  overload: Atlas.Timer.Pause*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Timer.Unpause
  commentId: M:Atlas.Timer.Unpause
  id: Unpause
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: Unpause()
  nameWithType: Timer.Unpause()
  fullName: Atlas.Timer.Unpause()
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: Unpause
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 105
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nUnpauses the timer\n"
  example: []
  syntax:
    content: public void Unpause()
    content.vb: Public Sub Unpause
  overload: Atlas.Timer.Unpause*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Atlas.Timer.HasElapsed(System.Single)
  commentId: M:Atlas.Timer.HasElapsed(System.Single)
  id: HasElapsed(System.Single)
  parent: Atlas.Timer
  langs:
  - csharp
  - vb
  name: HasElapsed(Single)
  nameWithType: Timer.HasElapsed(Single)
  fullName: Atlas.Timer.HasElapsed(System.Single)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Runtime/Utils/Timer/Timer.cs
      branch: v0.9.5
      repo: https://github.com/david-knopp/Atlas
    id: HasElapsed
    path: ../../Assets/Scripts/Runtime/Utils/Timer/Timer.cs
    startLine: 117
  assemblies:
  - Atlas.Runtime
  namespace: Atlas
  summary: "\nHelper function to determine if the timer&apos;s elapsed time is greater or \nequal to the given time\n"
  example: []
  syntax:
    content: public bool HasElapsed(float time)
    parameters:
    - id: time
      type: System.Single
      description: Amount of time to compare with
    return:
      type: System.Boolean
      description: Whether or not the given amount of time has passed
    content.vb: Public Function HasElapsed(time As Single) As Boolean
  overload: Atlas.Timer.HasElapsed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Atlas
  commentId: N:Atlas
  name: Atlas
  nameWithType: Atlas
  fullName: Atlas
- uid: Atlas.Timer.#ctor*
  commentId: Overload:Atlas.Timer.#ctor
  name: Timer
  nameWithType: Timer.Timer
  fullName: Atlas.Timer.Timer
- uid: Atlas.TimeScale
  commentId: T:Atlas.TimeScale
  parent: Atlas
  name: TimeScale
  nameWithType: TimeScale
  fullName: Atlas.TimeScale
- uid: Atlas.Timer.Start
  commentId: M:Atlas.Timer.Start
  isExternal: true
- uid: Atlas.Timer.Pause
  commentId: M:Atlas.Timer.Pause
  isExternal: true
- uid: Atlas.Timer.Elapsed*
  commentId: Overload:Atlas.Timer.Elapsed
  name: Elapsed
  nameWithType: Timer.Elapsed
  fullName: Atlas.Timer.Elapsed
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Atlas.Timer.IsPaused*
  commentId: Overload:Atlas.Timer.IsPaused
  name: IsPaused
  nameWithType: Timer.IsPaused
  fullName: Atlas.Timer.IsPaused
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Atlas.Timer.IsTiming*
  commentId: Overload:Atlas.Timer.IsTiming
  name: IsTiming
  nameWithType: Timer.IsTiming
  fullName: Atlas.Timer.IsTiming
- uid: Atlas.Timer.Start*
  commentId: Overload:Atlas.Timer.Start
  name: Start
  nameWithType: Timer.Start
  fullName: Atlas.Timer.Start
- uid: Atlas.Timer.Stop*
  commentId: Overload:Atlas.Timer.Stop
  name: Stop
  nameWithType: Timer.Stop
  fullName: Atlas.Timer.Stop
- uid: Atlas.Timer.Pause*
  commentId: Overload:Atlas.Timer.Pause
  name: Pause
  nameWithType: Timer.Pause
  fullName: Atlas.Timer.Pause
- uid: Atlas.Timer.Unpause*
  commentId: Overload:Atlas.Timer.Unpause
  name: Unpause
  nameWithType: Timer.Unpause
  fullName: Atlas.Timer.Unpause
- uid: Atlas.Timer.HasElapsed*
  commentId: Overload:Atlas.Timer.HasElapsed
  name: HasElapsed
  nameWithType: Timer.HasElapsed
  fullName: Atlas.Timer.HasElapsed
