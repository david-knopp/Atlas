### YamlMime:ManagedReference
items:
- uid: Atlas.ICommand`1
  commentId: T:Atlas.ICommand`1
  id: ICommand`1
  parent: Atlas
  children:
  - Atlas.ICommand`1.Execute(`0)
  langs:
  - csharp
  - vb
  name: ICommand<T>
  nameWithType: ICommand<T>
  fullName: Atlas.ICommand<T>
  type: Interface
  source:
    id: ICommand
    path: ''
    startLine: 2412
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nInterface for creating object-based method callbacks with a single argument\n"
  example: []
  syntax:
    content: public interface ICommand<T>
    typeParameters:
    - id: T
    content.vb: Public Interface ICommand(Of T)
  seealso:
  - linkId: Atlas.Signal`1
    commentId: T:Atlas.Signal`1
  nameWithType.vb: ICommand(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Atlas.ICommand(Of T)
  name.vb: ICommand(Of T)
- uid: Atlas.ICommand`1.Execute(`0)
  commentId: M:Atlas.ICommand`1.Execute(`0)
  id: Execute(`0)
  parent: Atlas.ICommand`1
  langs:
  - csharp
  - vb
  name: Execute(T)
  nameWithType: ICommand<T>.Execute(T)
  fullName: Atlas.ICommand<T>.Execute(T)
  type: Method
  source:
    id: Execute
    path: ''
    startLine: 2417
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nExecutes the object. When registered with a <xref href=\"Atlas.Signal%601\" data-throw-if-not-resolved=\"false\"></xref>, this will get called upon <xref href=\"Atlas.Signal%601.Dispatch(%600)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: void Execute(T arg)
    parameters:
    - id: arg
      type: '{T}'
    content.vb: Sub Execute(arg As T)
  overload: Atlas.ICommand`1.Execute*
  nameWithType.vb: ICommand(Of T).Execute(T)
  fullName.vb: Atlas.ICommand(Of T).Execute(T)
references:
- uid: Atlas.Signal`1
  commentId: T:Atlas.Signal`1
  name: Signal<T>
  nameWithType: Signal<T>
  fullName: Atlas.Signal<T>
  nameWithType.vb: Signal(Of T)
  fullName.vb: Atlas.Signal(Of T)
  name.vb: Signal(Of T)
  spec.csharp:
  - uid: Atlas.Signal`1
    name: Signal
    nameWithType: Signal
    fullName: Atlas.Signal
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Atlas.Signal`1
    name: Signal
    nameWithType: Signal
    fullName: Atlas.Signal
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Atlas
  commentId: N:Atlas
  name: Atlas
  nameWithType: Atlas
  fullName: Atlas
- uid: Atlas.Signal`1.Dispatch(`0)
  commentId: M:Atlas.Signal`1.Dispatch(`0)
  isExternal: true
- uid: Atlas.ICommand`1.Execute*
  commentId: Overload:Atlas.ICommand`1.Execute
  name: Execute
  nameWithType: ICommand<T>.Execute
  fullName: Atlas.ICommand<T>.Execute
  nameWithType.vb: ICommand(Of T).Execute
  fullName.vb: Atlas.ICommand(Of T).Execute
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
