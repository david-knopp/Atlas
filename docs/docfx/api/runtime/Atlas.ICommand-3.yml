### YamlMime:ManagedReference
items:
- uid: Atlas.ICommand`3
  commentId: T:Atlas.ICommand`3
  id: ICommand`3
  parent: Atlas
  children:
  - Atlas.ICommand`3.Execute(`0,`1,`2)
  langs:
  - csharp
  - vb
  name: ICommand<T1, T2, T3>
  nameWithType: ICommand<T1, T2, T3>
  fullName: Atlas.ICommand<T1, T2, T3>
  type: Interface
  source:
    id: ICommand
    path: ''
    startLine: 2436
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nInterface for creating object-based method callbacks with three argument\n"
  example: []
  syntax:
    content: public interface ICommand<T1, T2, T3>
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    content.vb: Public Interface ICommand(Of T1, T2, T3)
  seealso:
  - linkId: Atlas.Signal`3
    commentId: T:Atlas.Signal`3
  nameWithType.vb: ICommand(Of T1, T2, T3)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Atlas.ICommand(Of T1, T2, T3)
  name.vb: ICommand(Of T1, T2, T3)
- uid: Atlas.ICommand`3.Execute(`0,`1,`2)
  commentId: M:Atlas.ICommand`3.Execute(`0,`1,`2)
  id: Execute(`0,`1,`2)
  parent: Atlas.ICommand`3
  langs:
  - csharp
  - vb
  name: Execute(T1, T2, T3)
  nameWithType: ICommand<T1, T2, T3>.Execute(T1, T2, T3)
  fullName: Atlas.ICommand<T1, T2, T3>.Execute(T1, T2, T3)
  type: Method
  source:
    id: Execute
    path: ''
    startLine: 2441
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nExecutes the object. When registered with a <xref href=\"Atlas.Signal%603\" data-throw-if-not-resolved=\"false\"></xref>, this will get called upon <xref href=\"Atlas.Signal%603.Dispatch(%600%2c%601%2c%602)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: void Execute(T1 arg1, T2 arg2, T3 arg3)
    parameters:
    - id: arg1
      type: '{T1}'
    - id: arg2
      type: '{T2}'
    - id: arg3
      type: '{T3}'
    content.vb: Sub Execute(arg1 As T1, arg2 As T2, arg3 As T3)
  overload: Atlas.ICommand`3.Execute*
  nameWithType.vb: ICommand(Of T1, T2, T3).Execute(T1, T2, T3)
  fullName.vb: Atlas.ICommand(Of T1, T2, T3).Execute(T1, T2, T3)
references:
- uid: Atlas.Signal`3
  commentId: T:Atlas.Signal`3
  name: Signal<T1, T2, T3>
  nameWithType: Signal<T1, T2, T3>
  fullName: Atlas.Signal<T1, T2, T3>
  nameWithType.vb: Signal(Of T1, T2, T3)
  fullName.vb: Atlas.Signal(Of T1, T2, T3)
  name.vb: Signal(Of T1, T2, T3)
  spec.csharp:
  - uid: Atlas.Signal`3
    name: Signal
    nameWithType: Signal
    fullName: Atlas.Signal
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Atlas.Signal`3
    name: Signal
    nameWithType: Signal
    fullName: Atlas.Signal
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Atlas
  commentId: N:Atlas
  name: Atlas
  nameWithType: Atlas
  fullName: Atlas
- uid: Atlas.Signal`3.Dispatch(`0,`1,`2)
  commentId: M:Atlas.Signal`3.Dispatch(`0,`1,`2)
  isExternal: true
- uid: Atlas.ICommand`3.Execute*
  commentId: Overload:Atlas.ICommand`3.Execute
  name: Execute
  nameWithType: ICommand<T1, T2, T3>.Execute
  fullName: Atlas.ICommand<T1, T2, T3>.Execute
  nameWithType.vb: ICommand(Of T1, T2, T3).Execute
  fullName.vb: Atlas.ICommand(Of T1, T2, T3).Execute
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
