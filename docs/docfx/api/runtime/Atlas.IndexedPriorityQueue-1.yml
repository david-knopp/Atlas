### YamlMime:ManagedReference
items:
- uid: Atlas.IndexedPriorityQueue`1
  commentId: T:Atlas.IndexedPriorityQueue`1
  id: IndexedPriorityQueue`1
  parent: Atlas
  children:
  - Atlas.IndexedPriorityQueue`1.#ctor
  - Atlas.IndexedPriorityQueue`1.#ctor(System.Int32)
  - Atlas.IndexedPriorityQueue`1.Clear
  - Atlas.IndexedPriorityQueue`1.Count
  - Atlas.IndexedPriorityQueue`1.DecreaseValueAtIndex(System.Int32,`0)
  - Atlas.IndexedPriorityQueue`1.IncreaseValueAtIndex(System.Int32,`0)
  - Atlas.IndexedPriorityQueue`1.Insert(System.Int32,`0)
  - Atlas.IndexedPriorityQueue`1.Item(System.Int32)
  - Atlas.IndexedPriorityQueue`1.Pop
  - Atlas.IndexedPriorityQueue`1.Resize(System.Int32)
  - Atlas.IndexedPriorityQueue`1.Set(System.Int32,`0)
  - Atlas.IndexedPriorityQueue`1.Top
  langs:
  - csharp
  - vb
  name: IndexedPriorityQueue<T>
  nameWithType: IndexedPriorityQueue<T>
  fullName: Atlas.IndexedPriorityQueue<T>
  type: Class
  source:
    id: IndexedPriorityQueue
    path: ''
    startLine: 421
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nGeneric priority queue data structure, providing random access to its elements\n"
  example: []
  syntax:
    content: >-
      public sealed class IndexedPriorityQueue<T>
          where T : IComparable<T>
    typeParameters:
    - id: T
      description: Type of contained elements
    content.vb: Public NotInheritable Class IndexedPriorityQueue(Of T As IComparable(Of T))
  inheritance:
  - System.Object
  nameWithType.vb: IndexedPriorityQueue(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Atlas.IndexedPriorityQueue(Of T)
  name.vb: IndexedPriorityQueue(Of T)
- uid: Atlas.IndexedPriorityQueue`1.Count
  commentId: P:Atlas.IndexedPriorityQueue`1.Count
  id: Count
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IndexedPriorityQueue<T>.Count
  fullName: Atlas.IndexedPriorityQueue<T>.Count
  type: Property
  source:
    id: Count
    path: ''
    startLine: 427
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nCurrent number of elements in the queue\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Atlas.IndexedPriorityQueue`1.Count*
  nameWithType.vb: IndexedPriorityQueue(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Count
- uid: Atlas.IndexedPriorityQueue`1.Item(System.Int32)
  commentId: P:Atlas.IndexedPriorityQueue`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: IndexedPriorityQueue<T>.Item[Int32]
  fullName: Atlas.IndexedPriorityQueue<T>.Item[System.Int32]
  type: Property
  source:
    id: this[]
    path: ''
    startLine: 438
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nAccesses the element at the given index\n"
  example: []
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the element to access
    return:
      type: '{T}'
      description: The value at the given index
    content.vb: Public Property Item(index As Integer) As T
  overload: Atlas.IndexedPriorityQueue`1.Item*
  nameWithType.vb: IndexedPriorityQueue(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Atlas.IndexedPriorityQueue`1.#ctor
  commentId: M:Atlas.IndexedPriorityQueue`1.#ctor
  id: '#ctor'
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: IndexedPriorityQueue()
  nameWithType: IndexedPriorityQueue<T>.IndexedPriorityQueue()
  fullName: Atlas.IndexedPriorityQueue<T>.IndexedPriorityQueue()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 458
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public IndexedPriorityQueue()
    content.vb: Public Sub New
  overload: Atlas.IndexedPriorityQueue`1.#ctor*
  nameWithType.vb: IndexedPriorityQueue(Of T).IndexedPriorityQueue()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).IndexedPriorityQueue()
- uid: Atlas.IndexedPriorityQueue`1.#ctor(System.Int32)
  commentId: M:Atlas.IndexedPriorityQueue`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: IndexedPriorityQueue(Int32)
  nameWithType: IndexedPriorityQueue<T>.IndexedPriorityQueue(Int32)
  fullName: Atlas.IndexedPriorityQueue<T>.IndexedPriorityQueue(System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 467
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public IndexedPriorityQueue(int maxSize)
    parameters:
    - id: maxSize
      type: System.Int32
      description: Max number of elements the queue can contain
    content.vb: Public Sub New(maxSize As Integer)
  overload: Atlas.IndexedPriorityQueue`1.#ctor*
  nameWithType.vb: IndexedPriorityQueue(Of T).IndexedPriorityQueue(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).IndexedPriorityQueue(System.Int32)
- uid: Atlas.IndexedPriorityQueue`1.Insert(System.Int32,`0)
  commentId: M:Atlas.IndexedPriorityQueue`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: IndexedPriorityQueue<T>.Insert(Int32, T)
  fullName: Atlas.IndexedPriorityQueue<T>.Insert(System.Int32, T)
  type: Method
  source:
    id: Insert
    path: ''
    startLine: 477
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nInserts a new value with the given index\n"
  example: []
  syntax:
    content: public void Insert(int index, T value)
    parameters:
    - id: index
      type: System.Int32
      description: index to insert at
    - id: value
      type: '{T}'
      description: value to insert
    content.vb: Public Sub Insert(index As Integer, value As T)
  overload: Atlas.IndexedPriorityQueue`1.Insert*
  nameWithType.vb: IndexedPriorityQueue(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Insert(System.Int32, T)
- uid: Atlas.IndexedPriorityQueue`1.Top
  commentId: M:Atlas.IndexedPriorityQueue`1.Top
  id: Top
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Top()
  nameWithType: IndexedPriorityQueue<T>.Top()
  fullName: Atlas.IndexedPriorityQueue<T>.Top()
  type: Method
  source:
    id: Top
    path: ''
    startLine: 499
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nGets the top element of the queue\n"
  example: []
  syntax:
    content: public T Top()
    return:
      type: '{T}'
      description: The top element
    content.vb: Public Function Top As T
  overload: Atlas.IndexedPriorityQueue`1.Top*
  nameWithType.vb: IndexedPriorityQueue(Of T).Top()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Top()
- uid: Atlas.IndexedPriorityQueue`1.Pop
  commentId: M:Atlas.IndexedPriorityQueue`1.Pop
  id: Pop
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Pop()
  nameWithType: IndexedPriorityQueue<T>.Pop()
  fullName: Atlas.IndexedPriorityQueue<T>.Pop()
  type: Method
  source:
    id: Pop
    path: ''
    startLine: 509
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nRemoves the top element from the queue\n"
  example: []
  syntax:
    content: public T Pop()
    return:
      type: '{T}'
      description: The removed element
    content.vb: Public Function Pop As T
  overload: Atlas.IndexedPriorityQueue`1.Pop*
  nameWithType.vb: IndexedPriorityQueue(Of T).Pop()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Pop()
- uid: Atlas.IndexedPriorityQueue`1.Set(System.Int32,`0)
  commentId: M:Atlas.IndexedPriorityQueue`1.Set(System.Int32,`0)
  id: Set(System.Int32,`0)
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Set(Int32, T)
  nameWithType: IndexedPriorityQueue<T>.Set(Int32, T)
  fullName: Atlas.IndexedPriorityQueue<T>.Set(System.Int32, T)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 536
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nUpdates the value at the given index. Note that this function is not\nas efficient as the DecreaseIndex/IncreaseIndex methods, but is\nbest when the value at the index is not known\n"
  remarks: This will cause either an upward or downard sort of the internal heap
  example: []
  syntax:
    content: public void Set(int index, T newValue)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the value to set
    - id: newValue
      type: '{T}'
      description: New value
    content.vb: Public Sub Set(index As Integer, newValue As T)
  overload: Atlas.IndexedPriorityQueue`1.Set*
  nameWithType.vb: IndexedPriorityQueue(Of T).Set(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Set(System.Int32, T)
- uid: Atlas.IndexedPriorityQueue`1.DecreaseValueAtIndex(System.Int32,`0)
  commentId: M:Atlas.IndexedPriorityQueue`1.DecreaseValueAtIndex(System.Int32,`0)
  id: DecreaseValueAtIndex(System.Int32,`0)
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: DecreaseValueAtIndex(Int32, T)
  nameWithType: IndexedPriorityQueue<T>.DecreaseValueAtIndex(Int32, T)
  fullName: Atlas.IndexedPriorityQueue<T>.DecreaseValueAtIndex(System.Int32, T)
  type: Method
  source:
    id: DecreaseValueAtIndex
    path: ''
    startLine: 554
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nDecreases the value at the current index to the given value\n"
  remarks: This will cause an upward sort of the internal heap
  example: []
  syntax:
    content: public void DecreaseValueAtIndex(int index, T decreasedValue)
    parameters:
    - id: index
      type: System.Int32
      description: Index to decrease value of
    - id: decreasedValue
      type: '{T}'
      description: New value
    content.vb: Public Sub DecreaseValueAtIndex(index As Integer, decreasedValue As T)
  overload: Atlas.IndexedPriorityQueue`1.DecreaseValueAtIndex*
  nameWithType.vb: IndexedPriorityQueue(Of T).DecreaseValueAtIndex(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).DecreaseValueAtIndex(System.Int32, T)
- uid: Atlas.IndexedPriorityQueue`1.IncreaseValueAtIndex(System.Int32,`0)
  commentId: M:Atlas.IndexedPriorityQueue`1.IncreaseValueAtIndex(System.Int32,`0)
  id: IncreaseValueAtIndex(System.Int32,`0)
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: IncreaseValueAtIndex(Int32, T)
  nameWithType: IndexedPriorityQueue<T>.IncreaseValueAtIndex(Int32, T)
  fullName: Atlas.IndexedPriorityQueue<T>.IncreaseValueAtIndex(System.Int32, T)
  type: Method
  source:
    id: IncreaseValueAtIndex
    path: ''
    startLine: 573
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nIncreases the value at the current index to the given value\n"
  remarks: This will cause a downward sort of the internal heap
  example: []
  syntax:
    content: public void IncreaseValueAtIndex(int index, T increasedValue)
    parameters:
    - id: index
      type: System.Int32
      description: Index to increase value of
    - id: increasedValue
      type: '{T}'
      description: New value
    content.vb: Public Sub IncreaseValueAtIndex(index As Integer, increasedValue As T)
  overload: Atlas.IndexedPriorityQueue`1.IncreaseValueAtIndex*
  nameWithType.vb: IndexedPriorityQueue(Of T).IncreaseValueAtIndex(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).IncreaseValueAtIndex(System.Int32, T)
- uid: Atlas.IndexedPriorityQueue`1.Clear
  commentId: M:Atlas.IndexedPriorityQueue`1.Clear
  id: Clear
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IndexedPriorityQueue<T>.Clear()
  fullName: Atlas.IndexedPriorityQueue<T>.Clear()
  type: Method
  source:
    id: Clear
    path: ''
    startLine: 589
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nRemoves all elements from the queue\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Atlas.IndexedPriorityQueue`1.Clear*
  nameWithType.vb: IndexedPriorityQueue(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Clear()
- uid: Atlas.IndexedPriorityQueue`1.Resize(System.Int32)
  commentId: M:Atlas.IndexedPriorityQueue`1.Resize(System.Int32)
  id: Resize(System.Int32)
  parent: Atlas.IndexedPriorityQueue`1
  langs:
  - csharp
  - vb
  name: Resize(Int32)
  nameWithType: IndexedPriorityQueue<T>.Resize(Int32)
  fullName: Atlas.IndexedPriorityQueue<T>.Resize(System.Int32)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 598
  assemblies:
  - cs.temp.dll
  namespace: Atlas
  summary: "\nSet the maximum capacity of the queue\n"
  example: []
  syntax:
    content: public void Resize(int maxSize)
    parameters:
    - id: maxSize
      type: System.Int32
      description: The desired maximum capacity
    content.vb: Public Sub Resize(maxSize As Integer)
  overload: Atlas.IndexedPriorityQueue`1.Resize*
  nameWithType.vb: IndexedPriorityQueue(Of T).Resize(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Resize(System.Int32)
references:
- uid: Atlas
  commentId: N:Atlas
  name: Atlas
  nameWithType: Atlas
  fullName: Atlas
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Atlas.IndexedPriorityQueue`1.Count*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Count
  name: Count
  nameWithType: IndexedPriorityQueue<T>.Count
  fullName: Atlas.IndexedPriorityQueue<T>.Count
  nameWithType.vb: IndexedPriorityQueue(Of T).Count
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Atlas.IndexedPriorityQueue`1.Item*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Item
  name: Item
  nameWithType: IndexedPriorityQueue<T>.Item
  fullName: Atlas.IndexedPriorityQueue<T>.Item
  nameWithType.vb: IndexedPriorityQueue(Of T).Item
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Item
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Atlas.IndexedPriorityQueue`1.#ctor*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.#ctor
  name: IndexedPriorityQueue
  nameWithType: IndexedPriorityQueue<T>.IndexedPriorityQueue
  fullName: Atlas.IndexedPriorityQueue<T>.IndexedPriorityQueue
  nameWithType.vb: IndexedPriorityQueue(Of T).IndexedPriorityQueue
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).IndexedPriorityQueue
- uid: Atlas.IndexedPriorityQueue`1.Insert*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Insert
  name: Insert
  nameWithType: IndexedPriorityQueue<T>.Insert
  fullName: Atlas.IndexedPriorityQueue<T>.Insert
  nameWithType.vb: IndexedPriorityQueue(Of T).Insert
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Insert
- uid: Atlas.IndexedPriorityQueue`1.Top*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Top
  name: Top
  nameWithType: IndexedPriorityQueue<T>.Top
  fullName: Atlas.IndexedPriorityQueue<T>.Top
  nameWithType.vb: IndexedPriorityQueue(Of T).Top
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Top
- uid: Atlas.IndexedPriorityQueue`1.Pop*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Pop
  name: Pop
  nameWithType: IndexedPriorityQueue<T>.Pop
  fullName: Atlas.IndexedPriorityQueue<T>.Pop
  nameWithType.vb: IndexedPriorityQueue(Of T).Pop
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Pop
- uid: Atlas.IndexedPriorityQueue`1.Set*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Set
  name: Set
  nameWithType: IndexedPriorityQueue<T>.Set
  fullName: Atlas.IndexedPriorityQueue<T>.Set
  nameWithType.vb: IndexedPriorityQueue(Of T).Set
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Set
- uid: Atlas.IndexedPriorityQueue`1.DecreaseValueAtIndex*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.DecreaseValueAtIndex
  name: DecreaseValueAtIndex
  nameWithType: IndexedPriorityQueue<T>.DecreaseValueAtIndex
  fullName: Atlas.IndexedPriorityQueue<T>.DecreaseValueAtIndex
  nameWithType.vb: IndexedPriorityQueue(Of T).DecreaseValueAtIndex
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).DecreaseValueAtIndex
- uid: Atlas.IndexedPriorityQueue`1.IncreaseValueAtIndex*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.IncreaseValueAtIndex
  name: IncreaseValueAtIndex
  nameWithType: IndexedPriorityQueue<T>.IncreaseValueAtIndex
  fullName: Atlas.IndexedPriorityQueue<T>.IncreaseValueAtIndex
  nameWithType.vb: IndexedPriorityQueue(Of T).IncreaseValueAtIndex
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).IncreaseValueAtIndex
- uid: Atlas.IndexedPriorityQueue`1.Clear*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Clear
  name: Clear
  nameWithType: IndexedPriorityQueue<T>.Clear
  fullName: Atlas.IndexedPriorityQueue<T>.Clear
  nameWithType.vb: IndexedPriorityQueue(Of T).Clear
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Clear
- uid: Atlas.IndexedPriorityQueue`1.Resize*
  commentId: Overload:Atlas.IndexedPriorityQueue`1.Resize
  name: Resize
  nameWithType: IndexedPriorityQueue<T>.Resize
  fullName: Atlas.IndexedPriorityQueue<T>.Resize
  nameWithType.vb: IndexedPriorityQueue(Of T).Resize
  fullName.vb: Atlas.IndexedPriorityQueue(Of T).Resize
