{
  "api/Atlas.ICommand-4.html": {
    "href": "api/Atlas.ICommand-4.html",
    "title": "Interface ICommand<T1, T2, T3, T4> | Atlas",
    "keywords": "Interface ICommand<T1, T2, T3, T4> Interface for creating object-based method callbacks with four argument Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ICommand<T1, T2, T3, T4> Type Parameters Name Description T1 T2 T3 T4 Examples namespace Atlas.Examples { public sealed class Example_Command { // command declaration public struct ExampleCommand : ICommand<float> { public void Execute( float value ) { UnityEngine.Debug.LogFormat( \"Command executed with value of {0}\", value ); } } public void OnInjectDependencies( Signal<float> exampleSignal ) { // instantiate a command object ExampleCommand command = new ExampleCommand(); // register a command as a listener of the signal exampleSignal.AddCommand( command ); // ... // further calls to exampleSignal.Dispatch( float value ) will also // invoke command.Execute( float value ) } } } Methods | Improve this Doc View Source Execute(T1, T2, T3, T4) Executes the object. When registered with a Signal<T1, T2, T3, T4> , this will get called upon Dispatch(T1, T2, T3, T4) Declaration void Execute(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 See Also Signal <T1, T2, T3, T4>"
  },
  "api/Atlas.IndexedPriorityQueue-1.html": {
    "href": "api/Atlas.IndexedPriorityQueue-1.html",
    "title": "Class IndexedPriorityQueue<T> | Atlas",
    "keywords": "Class IndexedPriorityQueue<T> Generic priority queue data structure, providing random access to its elements Inheritance System.Object IndexedPriorityQueue<T> Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public sealed class IndexedPriorityQueue<T> where T : IComparable<T> Type Parameters Name Description T Type of contained elements Constructors | Improve this Doc View Source IndexedPriorityQueue() Constructor Declaration public IndexedPriorityQueue() | Improve this Doc View Source IndexedPriorityQueue(Int32) Constructor Declaration public IndexedPriorityQueue(int maxSize) Parameters Type Name Description System.Int32 maxSize Max number of elements the queue can contain Properties | Improve this Doc View Source Count Current number of elements in the queue Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Accesses the element at the given index Declaration public T this[int index] { get; set; } Parameters Type Name Description System.Int32 index Index of the element to access Property Value Type Description T The value at the given index Methods | Improve this Doc View Source Clear() Removes all elements from the queue Declaration public void Clear() | Improve this Doc View Source DecreaseValueAtIndex(Int32, T) Decreases the value at the current index to the given value Declaration public void DecreaseValueAtIndex(int index, T decreasedValue) Parameters Type Name Description System.Int32 index Index to decrease value of T decreasedValue New value Remarks This will cause an upward sort of the internal heap | Improve this Doc View Source IncreaseValueAtIndex(Int32, T) Increases the value at the current index to the given value Declaration public void IncreaseValueAtIndex(int index, T increasedValue) Parameters Type Name Description System.Int32 index Index to increase value of T increasedValue New value Remarks This will cause a downward sort of the internal heap | Improve this Doc View Source Insert(Int32, T) Inserts a new value with the given index Declaration public void Insert(int index, T value) Parameters Type Name Description System.Int32 index index to insert at T value value to insert | Improve this Doc View Source Pop() Removes the top element from the queue Declaration public T Pop() Returns Type Description T The removed element | Improve this Doc View Source Resize(Int32) Set the maximum capacity of the queue Declaration public void Resize(int maxSize) Parameters Type Name Description System.Int32 maxSize The desired maximum capacity | Improve this Doc View Source Set(Int32, T) Updates the value at the given index. Note that this function is not as efficient as the DecreaseIndex/IncreaseIndex methods, but is best when the value at the index is not known Declaration public void Set(int index, T newValue) Parameters Type Name Description System.Int32 index Index of the value to set T newValue New value Remarks This will cause either an upward or downard sort of the internal heap | Improve this Doc View Source Top() Gets the top element of the queue Declaration public T Top() Returns Type Description T The top element"
  },
  "api/Atlas.IUIPanel.html": {
    "href": "api/Atlas.IUIPanel.html",
    "title": "Interface IUIPanel | Atlas",
    "keywords": "Interface IUIPanel Interface for UI panels, meant to be used when managed by a UIStack Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface IUIPanel Properties | Improve this Doc View Source IsActive Whether or not the panel is currently active, will be set by the UIStack Declaration bool IsActive { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source OnHide(Boolean) Called when the panel becomes hidden in the UIStack Declaration void OnHide(bool doTransition) Parameters Type Name Description System.Boolean doTransition Whether or not a transition is intended | Improve this Doc View Source OnPop(Boolean) Called when the panel is removed from the UIStack Declaration void OnPop(bool doTransition) Parameters Type Name Description System.Boolean doTransition Whether or not a transition is intended | Improve this Doc View Source OnPush(Boolean) Called when the panel is added to the UI stack Declaration void OnPush(bool doTransition) Parameters Type Name Description System.Boolean doTransition Whether or not a transition is intended | Improve this Doc View Source OnShow(Boolean) Called when the panel becomes the top (visible) panel in the UIStack Declaration void OnShow(bool doTransition) Parameters Type Name Description System.Boolean doTransition Whether or not a transition is intended See Also UIStack"
  },
  "api/Atlas.MinValuePropertyDrawer.html": {
    "href": "api/Atlas.MinValuePropertyDrawer.html",
    "title": "Class MinValuePropertyDrawer | Atlas",
    "keywords": "Class MinValuePropertyDrawer Handles inspector drawing for MinValueAttribute Inheritance System.Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer MinValuePropertyDrawer Inherited Members UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomPropertyDrawer(typeof(MinValueAttribute))] public sealed class MinValuePropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/Atlas.PreventEditInInspectorAttribute.html": {
    "href": "api/Atlas.PreventEditInInspectorAttribute.html",
    "title": "Class PreventEditInInspectorAttribute | Atlas",
    "keywords": "Class PreventEditInInspectorAttribute Prevents the target field from being edited in the inspector window while still maintaining its visiblity Inheritance System.Object System.Attribute UnityEngine.PropertyAttribute PreventEditInInspectorAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members UnityEngine.PropertyAttribute.order Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class PreventEditInInspectorAttribute : PropertyAttribute, _Attribute Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_PreventEditInInspectorAttribute : MonoBehaviour { // field is displayed in inspector, but is greyed out and can't be edited [SerializeField, PreventEditInInspector] private int m_uneditableField; } } Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Atlas.PreventEditInInspectorPropertyDrawer.html": {
    "href": "api/Atlas.PreventEditInInspectorPropertyDrawer.html",
    "title": "Class PreventEditInInspectorPropertyDrawer | Atlas",
    "keywords": "Class PreventEditInInspectorPropertyDrawer Handles inspector drawing for PreventEditInInspectorAttribute Inheritance System.Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer PreventEditInInspectorPropertyDrawer Inherited Members UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomPropertyDrawer(typeof(PreventEditInInspectorAttribute))] public sealed class PreventEditInInspectorPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/Atlas.Signal-4.html": {
    "href": "api/Atlas.Signal-4.html",
    "title": "Class Signal<T1, T2, T3, T4> | Atlas",
    "keywords": "Class Signal<T1, T2, T3, T4> Four-argument signal Inheritance System.Object SignalBase < ICommand <T1, T2, T3, T4>, System.Action <T1, T2, T3, T4>> Signal<T1, T2, T3, T4> Implements ISignal Inherited Members SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.AddCommand<TCommand>(TCommand) SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.AddCommand<TCommand>() SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.RemoveCommand<TCommand>() SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.AddListener(Action<T1, T2, T3, T4>) SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.RemoveListener(Action<T1, T2, T3, T4>) SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.m_commands SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>.m_listeners Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class Signal<T1, T2, T3, T4> : SignalBase<ICommand<T1, T2, T3, T4>, Action<T1, T2, T3, T4>>, ISignal Type Parameters Name Description T1 First argument type T2 Second argument type T3 Third argument type T4 Fourth argument Examples namespace Atlas.Examples { public sealed class Example_Signal { public enum CharacterState { Alive, Dead } // signal declaration public class CharacterStateChangedSignal : Signal<CharacterState> { } // called externally to provide relevant dependencies public void OnInjectDependencies( CharacterStateChangedSignal signal ) { m_signal = signal; } public void TakeDamage( int damage ) { m_curHealth -= damage; if ( m_curHealth <= 0 ) { // dispatches state change to all listeners m_signal.Dispatch( CharacterState.Dead ); } } private CharacterStateChangedSignal m_signal; private int m_curHealth; } } Methods | Improve this Doc View Source Dispatch(T1, T2, T3, T4) Invokes the signal, calling all registered callback methods/commands Declaration public void Dispatch(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 First argument to pass to the callbacks T2 arg2 Second argument to pass to the callbacks T3 arg3 Third argument to pass to the callbacks T4 arg4 Fourth argument to pass to the callbacks Implements ISignal"
  },
  "api/Atlas.Signal.html": {
    "href": "api/Atlas.Signal.html",
    "title": "Class Signal | Atlas",
    "keywords": "Class Signal Zero-argument signal Inheritance System.Object SignalBase < ICommand , System.Action > Signal Implements ISignal Inherited Members SignalBase<ICommand, Action>.AddCommand<TCommand>(TCommand) SignalBase<ICommand, Action>.AddCommand<TCommand>() SignalBase<ICommand, Action>.RemoveCommand<TCommand>() SignalBase<ICommand, Action>.AddListener(Action) SignalBase<ICommand, Action>.RemoveListener(Action) SignalBase<ICommand, Action>.m_commands SignalBase<ICommand, Action>.m_listeners Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class Signal : SignalBase<ICommand, Action>, ISignal Examples namespace Atlas.Examples { public sealed class Example_Signal { public enum CharacterState { Alive, Dead } // signal declaration public class CharacterStateChangedSignal : Signal<CharacterState> { } // called externally to provide relevant dependencies public void OnInjectDependencies( CharacterStateChangedSignal signal ) { m_signal = signal; } public void TakeDamage( int damage ) { m_curHealth -= damage; if ( m_curHealth <= 0 ) { // dispatches state change to all listeners m_signal.Dispatch( CharacterState.Dead ); } } private CharacterStateChangedSignal m_signal; private int m_curHealth; } } Methods | Improve this Doc View Source Dispatch() Invokes the signal, calling all registered callback methods/commands Declaration public void Dispatch() Implements ISignal"
  },
  "api/Atlas.TimedDebugDrawModifier.html": {
    "href": "api/Atlas.TimedDebugDrawModifier.html",
    "title": "Struct TimedDebugDrawModifier | Atlas",
    "keywords": "Struct TimedDebugDrawModifier Causes the modified IDebugDrawer to render for the given amount of time Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct TimedDebugDrawModifier : IDebugDrawer Constructors | Improve this Doc View Source TimedDebugDrawModifier(IDebugDrawer, Single) Constructor Declaration public TimedDebugDrawModifier(IDebugDrawer drawer, float lifetime) Parameters Type Name Description IDebugDrawer drawer Element to draw System.Single lifetime Amount of time (in seconds) to draw the element for Properties | Improve this Doc View Source Color Color of the modified element Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not the modified element has finished drawing Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the modified element Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera)"
  },
  "api/Atlas.Timer.html": {
    "href": "api/Atlas.Timer.html",
    "title": "Struct Timer | Atlas",
    "keywords": "Struct Timer Provides a simple interface for measuring elapsed time in seconds Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct Timer Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_Timer : MonoBehaviour { // create a timer that ticks based on Unity's Time.unscaledTime private Timer m_timer = new Timer( TimeScale.Unscaled ); private void Start() { // start timing m_timer.Start(); } private void Update() { // check if 3 seconds has passed since starting if ( m_timer.HasElapsed( 3.0f ) ) { // stop timing m_timer.Stop(); } // Toggle pause if ( Input.GetKeyDown( KeyCode.Pause ) ) { if ( m_timer.IsPaused ) { m_timer.Unpause(); } else { m_timer.Pause(); } } } } } Constructors | Improve this Doc View Source Timer(TimeScale) Constructor Declaration public Timer(TimeScale scale = TimeScale.Scaled) Parameters Type Name Description TimeScale scale Target time scale to \"tick\" with Properties | Improve this Doc View Source Elapsed Amount of time that has elapsed (in seconds) since Start() was last called, or 0 if it the timer has not been started When the timer is paused, the return value will be the amount of time measured before Pause() was called Declaration public float Elapsed { get; } Property Value Type Description System.Single | Improve this Doc View Source IsPaused Whether or not the timer is currently paused Declaration public bool IsPaused { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTiming Whether or not the timer is currently measuring time Declaration public bool IsTiming { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source HasElapsed(Single) Helper function to determine if the timer's elapsed time is greater or equal to the given time Declaration public bool HasElapsed(float time) Parameters Type Name Description System.Single time Amount of time to compare with Returns Type Description System.Boolean Whether or not the given amount of time has passed | Improve this Doc View Source Pause() Pauses timing Declaration public void Pause() | Improve this Doc View Source Start() Starts timing Declaration public void Start() | Improve this Doc View Source Start(Single) Starts timing, but starts at the given time offset instead of 0 Declaration public void Start(float timeOffset) Parameters Type Name Description System.Single timeOffset Amount of time to start offset by | Improve this Doc View Source Stop() Stops timing Declaration public void Stop() | Improve this Doc View Source Unpause() Unpauses the timer Declaration public void Unpause()"
  },
  "api/Atlas.AnchorPosition.html": {
    "href": "api/Atlas.AnchorPosition.html",
    "title": "Enum AnchorPosition | Atlas",
    "keywords": "Enum AnchorPosition An enumeration for various types of UI anchoring positions Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum AnchorPosition Fields Name Description BottomLeft BottomRight Center TopLeft TopRight See Also TextDebugDrawer Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.DebugDraw.html": {
    "href": "api/Atlas.DebugDraw.html",
    "title": "Class DebugDraw | Atlas",
    "keywords": "Class DebugDraw A system for rendering debug elements in the game view, as well as the scene view. Options to enable in the editor or in standalone builds can be found in the Atlas preferences window. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SingletonBehavior < DebugDraw > DebugDraw Inherited Members SingletonBehavior<DebugDraw>.HasInstance SingletonBehavior<DebugDraw>.Instance SingletonBehavior<DebugDraw>.Awake() SingletonBehavior<DebugDraw>.OnDestroy() Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public sealed class DebugDraw : SingletonBehavior<DebugDraw> Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_DebugDraw : MonoBehaviour { private void Update() { // Draws a billboarded string of text for 1 frame DebugDraw.DrawText( Vector3.zero, \"Hi, how are ya?\", Color.cyan, 2f, AnchorPosition.Center ); } private void OnDisable() { // Draws a billboarded string of text for 3 seconds DebugDraw.DrawText( Vector3.zero, \"Later, gator\", Color.red, 1f, 3f, AnchorPosition.TopRight ); } } } Properties | Improve this Doc View Source IsEnabled Whether or not the system is enabled Declaration public static bool IsEnabled { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source DrawCircle(Vector3, Single, Color, Int32) Declaration public static void DrawCircle(Vector3 centerPos, float radius, Color color, int numSegments = 16) Parameters Type Name Description UnityEngine.Vector3 centerPos System.Single radius UnityEngine.Color color System.Int32 numSegments | Improve this Doc View Source DrawCircle(Vector3, Single, Color, Single, Int32) Declaration public static void DrawCircle(Vector3 centerPos, float radius, Color color, float lifetime, int numSegments = 16) Parameters Type Name Description UnityEngine.Vector3 centerPos System.Single radius UnityEngine.Color color System.Single lifetime System.Int32 numSegments | Improve this Doc View Source DrawCross(Vector3, Single, Color) Declaration public static void DrawCross(Vector3 pos, float lineLength, Color color) Parameters Type Name Description UnityEngine.Vector3 pos System.Single lineLength UnityEngine.Color color | Improve this Doc View Source DrawCross(Vector3, Single, Color, Single) Declaration public static void DrawCross(Vector3 pos, float lineLength, Color color, float lifetime) Parameters Type Name Description UnityEngine.Vector3 pos System.Single lineLength UnityEngine.Color color System.Single lifetime | Improve this Doc View Source DrawLine(Vector3, Vector3, Color) Declaration public static void DrawLine(Vector3 startPos, Vector3 endPos, Color color) Parameters Type Name Description UnityEngine.Vector3 startPos UnityEngine.Vector3 endPos UnityEngine.Color color | Improve this Doc View Source DrawLine(Vector3, Vector3, Color, Single) Declaration public static void DrawLine(Vector3 startPos, Vector3 endPos, Color color, float lifetime) Parameters Type Name Description UnityEngine.Vector3 startPos UnityEngine.Vector3 endPos UnityEngine.Color color System.Single lifetime | Improve this Doc View Source DrawRay(Vector3, Vector3, Color) Declaration public static void DrawRay(Vector3 pos, Vector3 dir, Color color) Parameters Type Name Description UnityEngine.Vector3 pos UnityEngine.Vector3 dir UnityEngine.Color color | Improve this Doc View Source DrawRay(Vector3, Vector3, Color, Single) Declaration public static void DrawRay(Vector3 pos, Vector3 dir, Color color, float lifetime) Parameters Type Name Description UnityEngine.Vector3 pos UnityEngine.Vector3 dir UnityEngine.Color color System.Single lifetime | Improve this Doc View Source DrawText(Vector3, String, Color, Single, AnchorPosition) Declaration public static void DrawText(Vector3 pos, string text, Color color, float fontSize, AnchorPosition anchor = AnchorPosition.TopLeft) Parameters Type Name Description UnityEngine.Vector3 pos System.String text UnityEngine.Color color System.Single fontSize AnchorPosition anchor | Improve this Doc View Source DrawText(Vector3, String, Color, Single, Single, AnchorPosition) Declaration public static void DrawText(Vector3 pos, string text, Color color, float fontSize, float lifetime, AnchorPosition anchor = AnchorPosition.TopLeft) Parameters Type Name Description UnityEngine.Vector3 pos System.String text UnityEngine.Color color System.Single fontSize System.Single lifetime AnchorPosition anchor | Improve this Doc View Source DrawText(Vector3, Quaternion, String, Color, Single, AnchorPosition) Declaration public static void DrawText(Vector3 pos, Quaternion rotation, string text, Color color, float fontSize, AnchorPosition anchor = AnchorPosition.TopLeft) Parameters Type Name Description UnityEngine.Vector3 pos UnityEngine.Quaternion rotation System.String text UnityEngine.Color color System.Single fontSize AnchorPosition anchor | Improve this Doc View Source DrawText(Vector3, Quaternion, String, Color, Single, Single, AnchorPosition) Declaration public static void DrawText(Vector3 pos, Quaternion rotation, string text, Color color, float fontSize, float lifetime, AnchorPosition anchor = AnchorPosition.TopLeft) Parameters Type Name Description UnityEngine.Vector3 pos UnityEngine.Quaternion rotation System.String text UnityEngine.Color color System.Single fontSize System.Single lifetime AnchorPosition anchor"
  },
  "api/Atlas.State.html": {
    "href": "api/Atlas.State.html",
    "title": "Class State | Atlas",
    "keywords": "Class State Represents a single state within a IStateMachine Inheritance System.Object State Implements ITickable Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public abstract class State : ITickable Constructors | Improve this Doc View Source State() Constructor Declaration public State() Properties | Improve this Doc View Source StateLinks Links to other states Declaration public List<IStateLink> StateLinks { get; } Property Value Type Description System.Collections.Generic.List < IStateLink > | Improve this Doc View Source StateMachine The IStateMachine that owns this state Declaration public IStateMachine StateMachine { get; set; } Property Value Type Description IStateMachine Methods | Improve this Doc View Source AddStateLink(IStateLink) Adds a link to another state Declaration public void AddStateLink(IStateLink link) Parameters Type Name Description IStateLink link The link to add | Improve this Doc View Source AddStateLink(State, StateLink.TransitionCondition) Adds a link to another state Declaration public void AddStateLink(State nextState, StateLink.TransitionCondition condition) Parameters Type Name Description State nextState The state to transition to when the given condition is satisfied StateLink.TransitionCondition condition The condition used to evaluate if this link is satisfied | Improve this Doc View Source Enter() Called when the state is entered Declaration public virtual void Enter() | Improve this Doc View Source Exit() Called when the state is exited Declaration public virtual void Exit() | Improve this Doc View Source Tick() Called when the state is updated Declaration public virtual void Tick() Implements ITickable See Also IStateMachine StateMachine"
  },
  "api/Atlas.StateLink.TransitionCondition.html": {
    "href": "api/Atlas.StateLink.TransitionCondition.html",
    "title": "Delegate StateLink.TransitionCondition | Atlas",
    "keywords": "Delegate StateLink.TransitionCondition The callback for determining whether or not this link's transition condition is satisfied Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public delegate bool TransitionCondition(); Returns Type Description System.Boolean True if a transition is desired, false otherwise"
  },
  "api/Atlas.TransformEditor.html": {
    "href": "api/Atlas.TransformEditor.html",
    "title": "Class TransformEditor | Atlas",
    "keywords": "Class TransformEditor Overrides the default Transform editor that adds handy buttons for resetting transform values Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor TransformEditor Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomEditor(typeof(Transform))] [CanEditMultipleObjects] public sealed class TransformEditor : Editor, IPreviewable, IToolModeOwner Methods | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/Atlas.TypeExtensions.html": {
    "href": "api/Atlas.TypeExtensions.html",
    "title": "Class TypeExtensions | Atlas",
    "keywords": "Class TypeExtensions Extension methods for the System.Type class Inheritance System.Object TypeExtensions Namespace : Atlas Assembly : Atlas.Editor.dll Syntax public static class TypeExtensions Methods | Improve this Doc View Source GetPrimitiveName(Type) Finds the primitive name for a given type. For instance, where System.Type.FullName would return \"System.Int32\" for an int, this method would return just \"int\". This is useful for creating more straight-forward code generation Declaration public static string GetPrimitiveName(this Type type) Parameters Type Name Description System.Type type The type to get the primitive name of Returns Type Description System.String The primitive name of the given type"
  },
  "api/Atlas.BackEase.html": {
    "href": "api/Atlas.BackEase.html",
    "title": "Class BackEase | Atlas",
    "keywords": "Class BackEase Inheritance System.Object BackEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class BackEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.Ease.html": {
    "href": "api/Atlas.Ease.html",
    "title": "Class Ease | Atlas",
    "keywords": "Class Ease A serializable class for simplifying easing/tweening workflow Inheritance System.Object Ease Implements UnityEngine.ISerializationCallbackReceiver Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [Serializable] public sealed class Ease : ISerializationCallbackReceiver Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_Ease : MonoBehaviour { [SerializeField] private Vector3 m_initialRotation; [SerializeField] private Vector3 m_finalRotation; [SerializeField] private Ease m_ease; private void Update() { // get normalized time on [0, 1], wrapping every 2 seconds float t = ( Time.time % 2f ) / 2f; // ease between rotations transform.rotation = m_ease.Interpolate( Quaternion.Euler( m_initialRotation ), Quaternion.Euler( m_finalRotation ), t ); } } } Properties | Improve this Doc View Source Type Type of ease function to use when evaluating Declaration public EaseType Type { get; set; } Property Value Type Description EaseType Methods | Improve this Doc View Source Evaluate(Single, Single) Calculates the eased value of t Declaration public float Evaluate(float t, float duration = 1F) Parameters Type Name Description System.Single t The time value to evaluate at System.Single duration The duration of this ease Returns Type Description System.Single The eased value | Improve this Doc View Source Interpolate(Single, Single, Single) Eases between the two given float values at time t Declaration public float Interpolate(float from, float to, float t) Parameters Type Name Description System.Single from Initial value System.Single to Final value System.Single t The time value to evaluate at, normalized to [0, 1] Returns Type Description System.Single The eased value | Improve this Doc View Source Interpolate(Quaternion, Quaternion, Single) Eases between two given UnityEngine.Quaternion values at time t Declaration public Quaternion Interpolate(Quaternion from, Quaternion to, float t) Parameters Type Name Description UnityEngine.Quaternion from Initial value UnityEngine.Quaternion to Final value System.Single t The time value to evaluate at, normalized to [0, 1] Returns Type Description UnityEngine.Quaternion The eased value | Improve this Doc View Source Interpolate(Vector2, Vector2, Single) Eases between two given UnityEngine.Vector2 values at time t Declaration public Vector2 Interpolate(Vector2 from, Vector2 to, float t) Parameters Type Name Description UnityEngine.Vector2 from Initial value UnityEngine.Vector2 to Final value System.Single t The time value to evaluate at, normalized to [0, 1] Returns Type Description UnityEngine.Vector2 The eased value | Improve this Doc View Source Interpolate(Vector3, Vector3, Single) Eases between two given UnityEngine.Vector3 values at time t Declaration public Vector3 Interpolate(Vector3 from, Vector3 to, float t) Parameters Type Name Description UnityEngine.Vector3 from Initial value UnityEngine.Vector3 to Final value System.Single t The time value to evaluate at, normalized to [0, 1] Returns Type Description UnityEngine.Vector3 The eased value | Improve this Doc View Source OnAfterDeserialize() Declaration public void OnAfterDeserialize() | Improve this Doc View Source OnBeforeSerialize() Declaration public void OnBeforeSerialize() Implements UnityEngine.ISerializationCallbackReceiver"
  },
  "api/Atlas.Effect.DestructionEventType.html": {
    "href": "api/Atlas.Effect.DestructionEventType.html",
    "title": "Enum Effect.DestructionEventType | Atlas",
    "keywords": "Enum Effect.DestructionEventType Event defining how the effect will be destroyed Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum DestructionEventType Fields Name Description Finished Destroy when all child emitters finish Manual Manually destroy via code (by calling UnityEngine.Object.Destroy(UnityEngine.Object,System.Single) ) Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.CubicEase.html": {
    "href": "api/Atlas.CubicEase.html",
    "title": "Class CubicEase | Atlas",
    "keywords": "Class CubicEase Inheritance System.Object CubicEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class CubicEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.ExponentialEase.html": {
    "href": "api/Atlas.ExponentialEase.html",
    "title": "Class ExponentialEase | Atlas",
    "keywords": "Class ExponentialEase Inheritance System.Object ExponentialEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class ExponentialEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.ICommand-3.html": {
    "href": "api/Atlas.ICommand-3.html",
    "title": "Interface ICommand<T1, T2, T3> | Atlas",
    "keywords": "Interface ICommand<T1, T2, T3> Interface for creating object-based method callbacks with three argument Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ICommand<T1, T2, T3> Type Parameters Name Description T1 T2 T3 Examples namespace Atlas.Examples { public sealed class Example_Command { // command declaration public struct ExampleCommand : ICommand<float> { public void Execute( float value ) { UnityEngine.Debug.LogFormat( \"Command executed with value of {0}\", value ); } } public void OnInjectDependencies( Signal<float> exampleSignal ) { // instantiate a command object ExampleCommand command = new ExampleCommand(); // register a command as a listener of the signal exampleSignal.AddCommand( command ); // ... // further calls to exampleSignal.Dispatch( float value ) will also // invoke command.Execute( float value ) } } } Methods | Improve this Doc View Source Execute(T1, T2, T3) Executes the object. When registered with a Signal<T1, T2, T3> , this will get called upon Dispatch(T1, T2, T3) Declaration void Execute(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 See Also Signal <T1, T2, T3>"
  },
  "api/Atlas.IStateLink.html": {
    "href": "api/Atlas.IStateLink.html",
    "title": "Interface IStateLink | Atlas",
    "keywords": "Interface IStateLink Interface for objects that represent links between State s in a StateMachine Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface IStateLink Properties | Improve this Doc View Source IsSatisfied Whether or not this link's transition condition is satisifed. This should return true when a transition is desired, and false otherwise. Declaration bool IsSatisfied { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NextState The state to transition to after the current state Declaration State NextState { get; } Property Value Type Description State"
  },
  "api/Atlas.MaxValueAttribute.html": {
    "href": "api/Atlas.MaxValueAttribute.html",
    "title": "Class MaxValueAttribute | Atlas",
    "keywords": "Class MaxValueAttribute Sets a maximum value for the target field. Automatically prevents assigning a value greater than the specified value when editing the field in the inspector window Inheritance System.Object System.Attribute UnityEngine.PropertyAttribute MaxValueAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members UnityEngine.PropertyAttribute.order Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class MaxValueAttribute : PropertyAttribute, _Attribute Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_MaxValueAttribute : MonoBehaviour { // prevents assigning values > 10 in the inspector [SerializeField, MaxValue( 10.0f )] private float m_value; } } Constructors | Improve this Doc View Source MaxValueAttribute(Single) Constructor Declaration public MaxValueAttribute(float maxValue) Parameters Type Name Description System.Single maxValue The maximum allowable value the field can have Properties | Improve this Doc View Source MaxValue The maximum allowable value the field can have Declaration public float MaxValue { get; } Property Value Type Description System.Single Implements System.Runtime.InteropServices._Attribute See Also MinValueAttribute"
  },
  "api/Atlas.ProfilerScope.html": {
    "href": "api/Atlas.ProfilerScope.html",
    "title": "Struct ProfilerScope | Atlas",
    "keywords": "Struct ProfilerScope A handy scope variable that starts a UnityEngine.Profiling.Profiler sample, and ends it when the scope ends Implements System.IDisposable Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct ProfilerScope : IDisposable Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_ProfilerScope : MonoBehaviour { private void Update() { using ( new ProfilerScope( \"Example\" ) ) { // code to measure... } } } } Constructors | Improve this Doc View Source ProfilerScope(String) Constructor Declaration public ProfilerScope(string name) Parameters Type Name Description System.String name A string to identify the sample in the Profiler window | Improve this Doc View Source ProfilerScope(String, Object) Constructor Declaration public ProfilerScope(string name, Object targetObject) Parameters Type Name Description System.String name A string to identify the sample in the Profiler window UnityEngine.Object targetObject An object that provides context to the sample Methods | Improve this Doc View Source Dispose() Ends the scope Declaration public void Dispose() Implements System.IDisposable See Also GUIColorScope"
  },
  "api/Atlas.QuadraticEase.html": {
    "href": "api/Atlas.QuadraticEase.html",
    "title": "Class QuadraticEase | Atlas",
    "keywords": "Class QuadraticEase Inheritance System.Object QuadraticEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class QuadraticEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.SignalBase-2.html": {
    "href": "api/Atlas.SignalBase-2.html",
    "title": "Class SignalBase<TCommandBase, TAction> | Atlas",
    "keywords": "Class SignalBase<TCommandBase, TAction> Base signal class that provides a shared listener management for simpler derived signals Inheritance System.Object SignalBase<TCommandBase, TAction> Signal Signal<T> Signal<T1, T2> Signal<T1, T2, T3> Signal<T1, T2, T3, T4> Implements ISignal Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class SignalBase<TCommandBase, TAction> : ISignal Type Parameters Name Description TCommandBase Base type of command listeners to allow TAction Type of callback listeners to allow Constructors | Improve this Doc View Source SignalBase() Constructor Declaration public SignalBase() Fields | Improve this Doc View Source m_commands Declaration protected List<TCommandBase> m_commands Field Value Type Description System.Collections.Generic.List <TCommandBase> | Improve this Doc View Source m_listeners Declaration protected List<TAction> m_listeners Field Value Type Description System.Collections.Generic.List <TAction> Methods | Improve this Doc View Source AddCommand<TCommand>() Creates and registeres a command as a listener Declaration public void AddCommand<TCommand>() where TCommand : TCommandBase Type Parameters Name Description TCommand Type of command to add | Improve this Doc View Source AddCommand<TCommand>(TCommand) Registers the given command instance as a listener Declaration public void AddCommand<TCommand>(TCommand command) where TCommand : TCommandBase Parameters Type Name Description TCommand command The command instance to register Type Parameters Name Description TCommand Type of command to add | Improve this Doc View Source AddListener(TAction) Registers the given callback as a listener Declaration public void AddListener(TAction listener) Parameters Type Name Description TAction listener Listener instance to register | Improve this Doc View Source RemoveCommand<TCommand>() Removes all command instances of the given type Declaration public void RemoveCommand<TCommand>() where TCommand : TCommandBase Type Parameters Name Description TCommand Type of commands to remove | Improve this Doc View Source RemoveListener(TAction) Unregisters the given callback as a listener Declaration public void RemoveListener(TAction listener) Parameters Type Name Description TAction listener The callback to unregister Implements ISignal"
  },
  "api/Atlas.SignalManager-1.html": {
    "href": "api/Atlas.SignalManager-1.html",
    "title": "Class SignalManager<TKey> | Atlas",
    "keywords": "Class SignalManager<TKey> A simple signal container meant to make dispatching and managing signal listeners across various systems easier Inheritance System.Object SignalManager<TKey> Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class SignalManager<TKey> Type Parameters Name Description TKey Type of key to use for identifying signals Constructors | Improve this Doc View Source SignalManager() Constructor Declaration public SignalManager() Methods | Improve this Doc View Source AddListener(TKey, Action) Adds a zero-argument callback to the signal with the given key Declaration public void AddListener(TKey signalKey, Action listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action listener Callback to register as a listener Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source AddListener<T>(TKey, Action<T>) Adds a single-argument callback to the signal with the given key Declaration public void AddListener<T>(TKey signalKey, Action<T> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T> listener Callback to register as a listener Type Parameters Name Description T Type of the signal's argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source AddListener<T1, T2>(TKey, Action<T1, T2>) Adds a two-argument callback to the signal with the given key Declaration public void AddListener<T1, T2>(TKey signalKey, Action<T1, T2> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T1, T2> listener Callback to register as a listener Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source AddListener<T1, T2, T3>(TKey, Action<T1, T2, T3>) Adds a three-argument callback to the signal with the given key Declaration public void AddListener<T1, T2, T3>(TKey signalKey, Action<T1, T2, T3> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T1, T2, T3> listener Callback to register as a listener Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument T3 Type of the signal's third argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source AddListener<T1, T2, T3, T4>(TKey, Action<T1, T2, T3, T4>) Adds a four-argument callback to the signal with the given key Declaration public void AddListener<T1, T2, T3, T4>(TKey signalKey, Action<T1, T2, T3, T4> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T1, T2, T3, T4> listener Callback to register as a listener Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument T3 Type of the signal's third argument T4 Type of the signal's fourth argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source Dispatch(TKey) Dispatches the signal with the given key Declaration public void Dispatch(TKey signalKey) Parameters Type Name Description TKey signalKey Key of the signal to dispatch Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch with the signal instance associated with the given key | Improve this Doc View Source Dispatch<T>(TKey, T) Dispatches the signal with the given key Declaration public void Dispatch<T>(TKey signalKey, T arg) Parameters Type Name Description TKey signalKey Key of the signal to dispatch T arg Argument to dispatch the signal with Type Parameters Name Description T Type of the signal's argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch with the signal instance associated with the given key | Improve this Doc View Source Dispatch<T1, T2>(TKey, T1, T2) Dispatches the signal with the given key Declaration public void Dispatch<T1, T2>(TKey signalKey, T1 arg1, T2 arg2) Parameters Type Name Description TKey signalKey Key of the signal to dispatch T1 arg1 First argument to dispatch the signal with T2 arg2 Second argument to dispatch the signal with Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch with the signal instance associated with the given key | Improve this Doc View Source Dispatch<T1, T2, T3>(TKey, T1, T2, T3) Dispatches the signal with the given key Declaration public void Dispatch<T1, T2, T3>(TKey signalKey, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TKey signalKey Key of the signal to dispatch T1 arg1 First argument to dispatch the signal with T2 arg2 Second argument to dispatch the signal with T3 arg3 Third argument to dispatch the signal with Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument T3 Type of the signal's third argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch with the signal instance associated with the given key | Improve this Doc View Source Dispatch<T1, T2, T3, T4>(TKey, T1, T2, T3, T4) Dispatches the signal with the given key Declaration public void Dispatch<T1, T2, T3, T4>(TKey signalKey, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TKey signalKey Key of the signal to dispatch T1 arg1 First argument to dispatch the signal with T2 arg2 Second argument to dispatch the signal with T3 arg3 Third argument to dispatch the signal with T4 arg4 Fourth argument to dispatch the signal with Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument T3 Type of the signal's third argument T4 Type of the signal's fourth argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch with the signal instance associated with the given key | Improve this Doc View Source RemoveListener(TKey, Action) Removes a zero-argument callback from the signal with the given key Declaration public void RemoveListener(TKey signalKey, Action listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action listener Callback to unregister Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source RemoveListener<T>(TKey, Action<T>) Removes a single-argument callback from the signal with the given key Declaration public void RemoveListener<T>(TKey signalKey, Action<T> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T> listener Callback to unregister Type Parameters Name Description T Type of the signal's argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source RemoveListener<T1, T2>(TKey, Action<T1, T2>) Removes a two-argument callback from the signal with the given key Declaration public void RemoveListener<T1, T2>(TKey signalKey, Action<T1, T2> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T1, T2> listener Callback to unregister Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source RemoveListener<T1, T2, T3>(TKey, Action<T1, T2, T3>) Removes a three-argument callback from the signal with the given key Declaration public void RemoveListener<T1, T2, T3>(TKey signalKey, Action<T1, T2, T3> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T1, T2, T3> listener Callback to unregister Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument T3 Type of the signal's third argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal | Improve this Doc View Source RemoveListener<T1, T2, T3, T4>(TKey, Action<T1, T2, T3, T4>) Removes a four-argument callback from the signal with the given key Declaration public void RemoveListener<T1, T2, T3, T4>(TKey signalKey, Action<T1, T2, T3, T4> listener) Parameters Type Name Description TKey signalKey Key for the desired signal System.Action <T1, T2, T3, T4> listener Callback to unregister Type Parameters Name Description T1 Type of the signal's first argument T2 Type of the signal's second argument T3 Type of the signal's third argument T4 Type of the signal's fourth argument Exceptions Type Condition System.InvalidOperationException Thrown when there is an argument mismatch between the listener and the signal"
  },
  "api/Atlas.TextDebugDrawer.html": {
    "href": "api/Atlas.TextDebugDrawer.html",
    "title": "Struct TextDebugDrawer | Atlas",
    "keywords": "Struct TextDebugDrawer Debug text element Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct TextDebugDrawer : IDebugDrawer Remarks Inspired by LotteMakesStuff's segment font: https://gist.github.com/LotteMakesStuff/ceb66cb29cb7d3c07da1207ab5d12045 and https://www.keshikan.net/img/dseg_sample.png Constructors | Improve this Doc View Source TextDebugDrawer(String, Color, Single, AnchorPosition) Constructor Declaration public TextDebugDrawer(string text, Color color, float fontSize, AnchorPosition anchor = AnchorPosition.TopLeft) Parameters Type Name Description System.String text Text to display UnityEngine.Color color Color of the text System.Single fontSize Size of the text's characters AnchorPosition anchor Position of the text's anchor Properties | Improve this Doc View Source Color The color of the text Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not the text has finished drawing Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the text Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.TextIndentHelper.html": {
    "href": "api/Atlas.TextIndentHelper.html",
    "title": "Struct TextIndentHelper | Atlas",
    "keywords": "Struct TextIndentHelper A helper object for making text indentation management easier, particularly when working with code generation Namespace : Atlas Assembly : Atlas.Editor.dll Syntax public struct TextIndentHelper Constructors | Improve this Doc View Source TextIndentHelper(Char, Int32) Constructor Declaration public TextIndentHelper(char indentCharacter = ' ', int charactersPerIndent = 4) Parameters Type Name Description System.Char indentCharacter The character to use as indentation, with a space as default System.Int32 charactersPerIndent Number of characters to use per indentation Fields | Improve this Doc View Source StandardSpacesHelper Default helper for providing 4 spaces per indentation Declaration public static readonly TextIndentHelper StandardSpacesHelper Field Value Type Description TextIndentHelper | Improve this Doc View Source StandardTabHelper Default helper for providing 1 tab per indentation Declaration public static readonly TextIndentHelper StandardTabHelper Field Value Type Description TextIndentHelper Properties | Improve this Doc View Source CharactersPerIndent Number of characters to use per indentation Declaration public int CharactersPerIndent { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Indent A string representing the current indentation level. This will initially be an empty string. Declaration public string Indent { get; } Property Value Type Description System.String | Improve this Doc View Source IndentLevel The current level/number of indentations Declaration public int IndentLevel { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ApplyIndent(String) Helper method for applying the current indentation to the given string. This is equivalent to prepending Indent to the front of text Declaration public string ApplyIndent(string text) Parameters Type Name Description System.String text The string to apply indentation to Returns Type Description System.String The indented string"
  },
  "api/Atlas.CircleDebugDrawer.html": {
    "href": "api/Atlas.CircleDebugDrawer.html",
    "title": "Struct CircleDebugDrawer | Atlas",
    "keywords": "Struct CircleDebugDrawer Debug circle element Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct CircleDebugDrawer : IDebugDrawer Constructors | Improve this Doc View Source CircleDebugDrawer(Single, Color, Int32) Constructor Declaration public CircleDebugDrawer(float radius, Color color, int numSegments) Parameters Type Name Description System.Single radius Radius of the circle UnityEngine.Color color Color of the circle System.Int32 numSegments Number of segments to use when constructing the circle Properties | Improve this Doc View Source Color The color of the circle Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not this drawer has finished drawing yet Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the circle Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.LineDebugDrawer.html": {
    "href": "api/Atlas.LineDebugDrawer.html",
    "title": "Struct LineDebugDrawer | Atlas",
    "keywords": "Struct LineDebugDrawer Debug line element Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct LineDebugDrawer : IDebugDrawer Constructors | Improve this Doc View Source LineDebugDrawer(Vector3, Vector3, Color) Constructor Declaration public LineDebugDrawer(Vector3 startPos, Vector3 endPos, Color color) Parameters Type Name Description UnityEngine.Vector3 startPos Starting position of the line UnityEngine.Vector3 endPos Ending position of the line UnityEngine.Color color Color of the line Properties | Improve this Doc View Source Color Color of the line Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not this drawer has finished drawing yet Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the line Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.PathAttribute.Path.html": {
    "href": "api/Atlas.PathAttribute.Path.html",
    "title": "Enum PathAttribute.Path | Atlas",
    "keywords": "Enum PathAttribute.Path Type of path target to represent Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum Path Fields Name Description Directory Represents the path of a directory File Represents the path of a file Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.QuarticEase.html": {
    "href": "api/Atlas.QuarticEase.html",
    "title": "Class QuarticEase | Atlas",
    "keywords": "Class QuarticEase Inheritance System.Object QuarticEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class QuarticEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.QuinticEase.html": {
    "href": "api/Atlas.QuinticEase.html",
    "title": "Class QuinticEase | Atlas",
    "keywords": "Class QuinticEase Inheritance System.Object QuinticEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class QuinticEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.SineEase.html": {
    "href": "api/Atlas.SineEase.html",
    "title": "Class SineEase | Atlas",
    "keywords": "Class SineEase Inheritance System.Object SineEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class SineEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.SingletonBehavior-1.html": {
    "href": "api/Atlas.SingletonBehavior-1.html",
    "title": "Class SingletonBehavior<TDerived> | Atlas",
    "keywords": "Class SingletonBehavior<TDerived> Base class that applies the singleton design pattern to a UnityEngine.MonoBehaviour , providing a shared instance of the given type Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SingletonBehavior<TDerived> DebugDraw GUIListener Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public abstract class SingletonBehavior<TDerived> : MonoBehaviour where TDerived : MonoBehaviour Type Parameters Name Description TDerived Type of the derived class Examples namespace Atlas.Examples { public sealed class Example_SingletonBehavior { // declare singleton class public sealed class AudioSystem : SingletonBehavior<AudioSystem> { public void PlayAudioClip( int id ) { // Audio playback code... } } // called when a goal is scored public void OnGoalScored() { // play audio using shared AudioSystem instance AudioSystem.Instance.PlayAudioClip( c_goalAudioID ); } private const int c_goalAudioID = 5; } } Properties | Improve this Doc View Source HasInstance Whether or not an instance exists. Since destruction order isn't guaranteed in Unity, it's recommended to reference this property when accessing singletons in shutdown methods such as OnDestroy Declaration public static bool HasInstance { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Instance The instance of the class. If an instance does not yet exist, an attempt will be made to find one using UnityEngine.Object.FindObjectOfType``1 . If an instance is still not found, an UnityEngine.GameObject will be instantiated with the desired class instance attached. Declaration public static TDerived Instance { get; } Property Value Type Description TDerived Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source OnDestroy() Declaration protected virtual void OnDestroy()"
  },
  "api/Atlas.TimeScale.html": {
    "href": "api/Atlas.TimeScale.html",
    "title": "Enum TimeScale | Atlas",
    "keywords": "Enum TimeScale Types of time scales used to reference Unity's various UnityEngine.Time methods Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum TimeScale Fields Name Description Fixed Uses the current UnityEngine.Time.fixedTime to provide more accurate time measuring inside of Unity's FixedUpdate Scaled Uses default UnityEngine.Time.time , thus allowing the timer to react to slow-mo effects and game pauses Unscaled Uses UnityEngine.Time.timeScale -independent time to effectively measure \"real\" time Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.TransformDebugDrawModifier.html": {
    "href": "api/Atlas.TransformDebugDrawModifier.html",
    "title": "Struct TransformDebugDrawModifier | Atlas",
    "keywords": "Struct TransformDebugDrawModifier Transforms the given IDebugDrawer into world space Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct TransformDebugDrawModifier : IDebugDrawer Constructors | Improve this Doc View Source TransformDebugDrawModifier(IDebugDrawer, Vector3) Constructor Declaration public TransformDebugDrawModifier(IDebugDrawer drawer, Vector3 position) Parameters Type Name Description IDebugDrawer drawer The drawer to transform UnityEngine.Vector3 position The world position to place the element at | Improve this Doc View Source TransformDebugDrawModifier(IDebugDrawer, Vector3, Quaternion) Constructor Declaration public TransformDebugDrawModifier(IDebugDrawer drawer, Vector3 position, Quaternion rotation) Parameters Type Name Description IDebugDrawer drawer The drawer to transform UnityEngine.Vector3 position The world position to place the element at UnityEngine.Quaternion rotation The rotation of the element Properties | Improve this Doc View Source Color Color of the modified element Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not the modified element has finished drawing Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the modified element Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera)"
  },
  "api/Atlas.CircularEase.html": {
    "href": "api/Atlas.CircularEase.html",
    "title": "Class CircularEase | Atlas",
    "keywords": "Class CircularEase Inheritance System.Object CircularEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class CircularEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.EditorGUILayoutUtils.html": {
    "href": "api/Atlas.EditorGUILayoutUtils.html",
    "title": "Class EditorGUILayoutUtils | Atlas",
    "keywords": "Class EditorGUILayoutUtils Inheritance System.Object EditorGUILayoutUtils Namespace : Atlas Assembly : Atlas.Editor.dll Syntax public static class EditorGUILayoutUtils Methods | Improve this Doc View Source HorizontalLine(Single, Single) Declaration public static void HorizontalLine(float height = 1F, float widthPct = 1F) Parameters Type Name Description System.Single height System.Single widthPct | Improve this Doc View Source HorizontalLine(Color, Single, Single) Declaration public static void HorizontalLine(Color color, float height = 1F, float widthPct = 1F) Parameters Type Name Description UnityEngine.Color color System.Single height System.Single widthPct | Improve this Doc View Source RichLabelField(String) Declaration public static void RichLabelField(string label) Parameters Type Name Description System.String label"
  },
  "api/Atlas.ElasticEase.html": {
    "href": "api/Atlas.ElasticEase.html",
    "title": "Class ElasticEase | Atlas",
    "keywords": "Class ElasticEase Inheritance System.Object ElasticEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class ElasticEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.GUIListener.html": {
    "href": "api/Atlas.GUIListener.html",
    "title": "Class GUIListener | Atlas",
    "keywords": "Class GUIListener A singleton class for registering and executing callbacks in Unity's OnGUI. Since simply including the OnGUI method in a UnityEngine.MonoBehaviour will cause undesirable heap allocations, this class is meant to collect those calls into one place, which can be disabled in live builds or even lazily instantiated for rendering debug information only when necessary. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SingletonBehavior < GUIListener > GUIListener Inherited Members SingletonBehavior<GUIListener>.HasInstance SingletonBehavior<GUIListener>.Instance SingletonBehavior<GUIListener>.Awake() SingletonBehavior<GUIListener>.OnDestroy() Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public sealed class GUIListener : SingletonBehavior<GUIListener> Events | Improve this Doc View Source GUIRenderEvent Event that fires every OnGUI update cycle Declaration public event Action GUIRenderEvent Event Type Type Description System.Action"
  },
  "api/Atlas.TaskScheduler.html": {
    "href": "api/Atlas.TaskScheduler.html",
    "title": "Class TaskScheduler | Atlas",
    "keywords": "Class TaskScheduler Handles scheduling and distributing task execution between frames, attempting to balance frame-by-frame execution so one frame isn't heavier than the another. Inheritance System.Object TaskScheduler Implements IScheduledTask Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public sealed class TaskScheduler : IScheduledTask Constructors | Improve this Doc View Source TaskScheduler(Int32) Constructor Declaration public TaskScheduler(int phaseIterationCount = 10) Parameters Type Name Description System.Int32 phaseIterationCount Number of frames to look ahead at when determining the optimum phase for a task Properties | Improve this Doc View Source Frame This scheduler's current frame count Declaration public int Frame { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TaskCount Number of tasks currently scheduled to execute Declaration public int TaskCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddTask(IScheduledTask, UInt32) Registers the given task for scheduled updates, with an automatic phase assignment. This method will be a bit slower than AddTask(IScheduledTask, UInt32, Int32) , as it will evaluate the number of scheduled tasks for upcoming frames in an attempt to select an optimum phase offset for the given task . Declaration public void AddTask(IScheduledTask task, uint frequency) Parameters Type Name Description IScheduledTask task The task to schedule System.UInt32 frequency The desired update frequency (in frames) | Improve this Doc View Source AddTask(IScheduledTask, UInt32, Int32) Registers the given task for scheduled updates Declaration public void AddTask(IScheduledTask task, uint frequency, int phase) Parameters Type Name Description IScheduledTask task The task to schedule System.UInt32 frequency The desired update frequency (in frames) System.Int32 phase An offset used to scatter tasks with similar frequencies | Improve this Doc View Source ChangeFrequency(IScheduledTask, UInt32) Changes the frequency for a task that is already managed by this scheduler Declaration public void ChangeFrequency(IScheduledTask task, uint frequency) Parameters Type Name Description IScheduledTask task The task to update System.UInt32 frequency The task's desired frequency | Improve this Doc View Source RemoveTask(IScheduledTask) Unregisters the given task Declaration public void RemoveTask(IScheduledTask task) Parameters Type Name Description IScheduledTask task The task to remove | Improve this Doc View Source ScheduledTick() Updates the scheduler, and any tasks scheduled to execute on the scheduler's current Frame Declaration public void ScheduledTick() Implements IScheduledTask See Also IScheduledTask"
  },
  "api/Atlas.UIStack.Transition.html": {
    "href": "api/Atlas.UIStack.Transition.html",
    "title": "Enum UIStack.Transition | Atlas",
    "keywords": "Enum UIStack.Transition Types of panel transitions Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [Flags] public enum Transition Fields Name Description Full Play all transitions Intro Play a transition only in OnPush(Boolean) / OnShow(Boolean) None No transition Outro Play a transition only in OnPop(Boolean) / OnHide(Boolean) Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.BounceEase.html": {
    "href": "api/Atlas.BounceEase.html",
    "title": "Class BounceEase | Atlas",
    "keywords": "Class BounceEase Inheritance System.Object BounceEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class BounceEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.DebugDrawModifierExtensions.html": {
    "href": "api/Atlas.DebugDrawModifierExtensions.html",
    "title": "Class DebugDrawModifierExtensions | Atlas",
    "keywords": "Class DebugDrawModifierExtensions Helpful extension methods to make working with IDebugDrawer more user-friendly Inheritance System.Object DebugDrawModifierExtensions Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class DebugDrawModifierExtensions Methods | Improve this Doc View Source Billboarded(IDebugDrawer, Vector3) Extension method to apply a billboarded transformation to the given IDebugDrawer . Uses UnityEngine.Camera.main by default for billboarding Declaration public static IDebugDrawer Billboarded(this IDebugDrawer drawer, Vector3 position) Parameters Type Name Description IDebugDrawer drawer The drawer to billboard UnityEngine.Vector3 position The position to aply to the element Returns Type Description IDebugDrawer The billboarded drawer | Improve this Doc View Source Billboarded(IDebugDrawer, Vector3, Camera) Extension method to apply a billboarded transformation to the given IDebugDrawer Declaration public static IDebugDrawer Billboarded(this IDebugDrawer drawer, Vector3 position, Camera camera) Parameters Type Name Description IDebugDrawer drawer The drawer to billboard UnityEngine.Vector3 position The position to aply to the element UnityEngine.Camera camera The camera to face the element toward Returns Type Description IDebugDrawer The billboarded drawer | Improve this Doc View Source Timed(IDebugDrawer, Single) Extension method to modify the given IDebugDrawer by adding a draw lifetime Declaration public static IDebugDrawer Timed(this IDebugDrawer drawer, float lifetime) Parameters Type Name Description IDebugDrawer drawer The drawer to modify System.Single lifetime Amount of time (in seconds) to draw the element for Returns Type Description IDebugDrawer The original IDebugDrawer , wrapped in a TimedDebugDrawModifier | Improve this Doc View Source Transformed(IDebugDrawer, Vector3) Extension method to apply a transformation to a IDebugDrawer Declaration public static IDebugDrawer Transformed(this IDebugDrawer drawer, Vector3 position) Parameters Type Name Description IDebugDrawer drawer The drawer to transform UnityEngine.Vector3 position The position to apply to the element Returns Type Description IDebugDrawer The transformed drawer | Improve this Doc View Source Transformed(IDebugDrawer, Vector3, Quaternion) Extension method to apply a transformation to a IDebugDrawer Declaration public static IDebugDrawer Transformed(this IDebugDrawer drawer, Vector3 position, Quaternion rotation) Parameters Type Name Description IDebugDrawer drawer The drawer to transform UnityEngine.Vector3 position The position to apply to the element UnityEngine.Quaternion rotation The rotation to apply to the element Returns Type Description IDebugDrawer The transformed drawer"
  },
  "api/Atlas.EnumExtensions.html": {
    "href": "api/Atlas.EnumExtensions.html",
    "title": "Class EnumExtensions | Atlas",
    "keywords": "Class EnumExtensions Extension methods for the System.Enum class Inheritance System.Object EnumExtensions Namespace : Atlas Assembly : Atlas.Editor.dll Syntax public static class EnumExtensions Methods | Improve this Doc View Source IsObsolete(Enum) Determines if the given enum value has been marked with System.ObsoleteAttribute Declaration public static bool IsObsolete(this Enum e) Parameters Type Name Description System.Enum e The enum value to check Returns Type Description System.Boolean True if the value has been marked obselete, false otherwise"
  },
  "api/Atlas.HashCode.html": {
    "href": "api/Atlas.HashCode.html",
    "title": "Class HashCode | Atlas",
    "keywords": "Class HashCode A utility class to aid in working with hashcodes Inheritance System.Object HashCode Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class HashCode Methods | Improve this Doc View Source Combine(Int32, Int32) Combines 2 hash codes Declaration public static int Combine(int hashA, int hashB) Parameters Type Name Description System.Int32 hashA System.Int32 hashB Returns Type Description System.Int32 The combined hash value | Improve this Doc View Source Combine(Int32, Int32, Int32) Combines 3 hash codes Declaration public static int Combine(int hashA, int hashB, int hashC) Parameters Type Name Description System.Int32 hashA System.Int32 hashB System.Int32 hashC Returns Type Description System.Int32 The combined hash value | Improve this Doc View Source Combine(Int32, Int32, Int32, Int32) Combines 4 hash codes Declaration public static int Combine(int hashA, int hashB, int hashC, int hashD) Parameters Type Name Description System.Int32 hashA System.Int32 hashB System.Int32 hashC System.Int32 hashD Returns Type Description System.Int32 The combined hash value"
  },
  "api/Atlas.ILateTickable.html": {
    "href": "api/Atlas.ILateTickable.html",
    "title": "Interface ILateTickable | Atlas",
    "keywords": "Interface ILateTickable A helper for providing a shared interface for updating objects in Unity's LateUpdate Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ILateTickable Methods | Improve this Doc View Source LateTick() Intended to be called every late update cycle Declaration void LateTick()"
  },
  "api/Atlas.ICommand-1.html": {
    "href": "api/Atlas.ICommand-1.html",
    "title": "Interface ICommand<T> | Atlas",
    "keywords": "Interface ICommand<T> Interface for creating object-based method callbacks with a single argument Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ICommand<T> Type Parameters Name Description T Examples namespace Atlas.Examples { public sealed class Example_Command { // command declaration public struct ExampleCommand : ICommand<float> { public void Execute( float value ) { UnityEngine.Debug.LogFormat( \"Command executed with value of {0}\", value ); } } public void OnInjectDependencies( Signal<float> exampleSignal ) { // instantiate a command object ExampleCommand command = new ExampleCommand(); // register a command as a listener of the signal exampleSignal.AddCommand( command ); // ... // further calls to exampleSignal.Dispatch( float value ) will also // invoke command.Execute( float value ) } } } Methods | Improve this Doc View Source Execute(T) Executes the object. When registered with a Signal<T> , this will get called upon Dispatch(T) Declaration void Execute(T arg) Parameters Type Name Description T arg See Also Signal <T>"
  },
  "api/Atlas.IDebugDrawer.html": {
    "href": "api/Atlas.IDebugDrawer.html",
    "title": "Interface IDebugDrawer | Atlas",
    "keywords": "Interface IDebugDrawer Interface for debug draw elements Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface IDebugDrawer Properties | Improve this Doc View Source Color The color of the element Declaration Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not this drawer has finished drawing yet, this can be used to allow certain elements to be drawn across multiple frames Declaration bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the element Declaration void Draw() Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.IScheduledTask.html": {
    "href": "api/Atlas.IScheduledTask.html",
    "title": "Interface IScheduledTask | Atlas",
    "keywords": "Interface IScheduledTask Interface for tasks used when scheduling execution Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface IScheduledTask Methods | Improve this Doc View Source ScheduledTick() Declaration void ScheduledTick() See Also TaskScheduler"
  },
  "api/Atlas.LinearEase.html": {
    "href": "api/Atlas.LinearEase.html",
    "title": "Class LinearEase | Atlas",
    "keywords": "Class LinearEase Inheritance System.Object LinearEase Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class LinearEase Methods | Improve this Doc View Source In(Single, Single) Declaration public static float In(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source InOut(Single, Single) Declaration public static float InOut(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single | Improve this Doc View Source Out(Single, Single) Declaration public static float Out(float curTime, float duration) Parameters Type Name Description System.Single curTime System.Single duration Returns Type Description System.Single"
  },
  "api/Atlas.ParticleEffectEmitter.html": {
    "href": "api/Atlas.ParticleEffectEmitter.html",
    "title": "Class ParticleEffectEmitter | Atlas",
    "keywords": "Class ParticleEffectEmitter Effect emitter for handling particle effect emissions Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EffectEmitterBase ParticleEffectEmitter Inherited Members EffectEmitterBase.EmissionFinishedEvent EffectEmitterBase.IsPlaying EffectEmitterBase.Update() Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [RequireComponent(typeof(ParticleSystem))] public sealed class ParticleEffectEmitter : EffectEmitterBase Properties | Improve this Doc View Source IsFinished Whether or not the emitter has finished emitting Declaration protected override bool IsFinished { get; } Property Value Type Description System.Boolean Overrides EffectEmitterBase.IsFinished Methods | Improve this Doc View Source Play() Starts playing particle system, and its children (if it has any) Declaration public override void Play() Overrides EffectEmitterBase.Play() | Improve this Doc View Source Stop() Stops the particle system, and its children (if it has any) Declaration public override void Stop() Overrides EffectEmitterBase.Stop()"
  },
  "api/Atlas.IFixedTickable.html": {
    "href": "api/Atlas.IFixedTickable.html",
    "title": "Interface IFixedTickable | Atlas",
    "keywords": "Interface IFixedTickable A helper for providing a shared interface for updating objects in Unity's FixedUpdate Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface IFixedTickable Methods | Improve this Doc View Source FixedTick() Intended to be called every fixed update cycle Declaration void FixedTick()"
  },
  "api/Atlas.IStateMachine.html": {
    "href": "api/Atlas.IStateMachine.html",
    "title": "Interface IStateMachine | Atlas",
    "keywords": "Interface IStateMachine Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface IStateMachine Properties | Improve this Doc View Source CurrentState Declaration State CurrentState { get; } Property Value Type Description State | Improve this Doc View Source PreviousState Declaration State PreviousState { get; } Property Value Type Description State Methods | Improve this Doc View Source AddState<StateType>(StateType) Declaration void AddState<StateType>(StateType state) where StateType : State Parameters Type Name Description StateType state Type Parameters Name Description StateType | Improve this Doc View Source GetState<StateType>() Declaration StateType GetState<StateType>() where StateType : State Returns Type Description StateType Type Parameters Name Description StateType | Improve this Doc View Source RemoveState<StateType>() Declaration void RemoveState<StateType>() where StateType : State Type Parameters Name Description StateType | Improve this Doc View Source RevertToPrevState() Declaration void RevertToPrevState() | Improve this Doc View Source SetState<StateType>() Declaration void SetState<StateType>() where StateType : State Type Parameters Name Description StateType"
  },
  "api/Atlas.MaxValuePropertyDrawer.html": {
    "href": "api/Atlas.MaxValuePropertyDrawer.html",
    "title": "Class MaxValuePropertyDrawer | Atlas",
    "keywords": "Class MaxValuePropertyDrawer Handles inspector drawing for MaxValueAttribute Inheritance System.Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer MaxValuePropertyDrawer Inherited Members UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomPropertyDrawer(typeof(MaxValueAttribute))] public sealed class MaxValuePropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/Atlas.PathAttribute.html": {
    "href": "api/Atlas.PathAttribute.html",
    "title": "Class PathAttribute | Atlas",
    "keywords": "Class PathAttribute Marks a target string field as a folder path, and automatically provides a button next to the field in the inspector window that opens your system's folder browser Inheritance System.Object System.Attribute UnityEngine.PropertyAttribute PathAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members UnityEngine.PropertyAttribute.order Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class PathAttribute : PropertyAttribute, _Attribute Examples using UnityEngine; using Path = Atlas.PathAttribute.Path; using Relativity = Atlas.PathAttribute.Relativity; namespace Atlas.Examples { public sealed class Example_PathAttribute : MonoBehaviour { [Header( \"Absolute\" )] [SerializeField, Path( Path.File, Relativity.ProjectRelative )] private string m_filePathAbsolute; [SerializeField, Path( Path.Directory, Relativity.ProjectRelative )] private string m_directoryPathAbsolute; [Header( \"Assets-relative\" )] [SerializeField, Path( Path.File, Relativity.AssetsRelative )] private string m_filePathAssets; [SerializeField, Path( Path.Directory, Relativity.AssetsRelative )] private string m_directoryPathAssets; [Header( \"Project-relative\" )] [SerializeField, Path( Path.File, Relativity.ProjectRelative )] private string m_filePathProject; [SerializeField, Path( Path.Directory, Relativity.ProjectRelative )] private string m_directoryPathProject; } } Constructors | Improve this Doc View Source PathAttribute(PathAttribute.Path, PathAttribute.Relativity) Constructor Declaration public PathAttribute(PathAttribute.Path pathTargetType = PathAttribute.Path.File, PathAttribute.Relativity relativePath = PathAttribute.Relativity.ProjectRelative) Parameters Type Name Description PathAttribute.Path pathTargetType Type of path to use PathAttribute.Relativity relativePath Type of path relativity to use Properties | Improve this Doc View Source RelativePath A string representing the desired relative path as defined by RelativityType Declaration public string RelativePath { get; } Property Value Type Description System.String | Improve this Doc View Source RelativityType Type of path relativity to use Declaration public PathAttribute.Relativity RelativityType { get; } Property Value Type Description PathAttribute.Relativity | Improve this Doc View Source TargetType Type of path target to represent Declaration public PathAttribute.Path TargetType { get; } Property Value Type Description PathAttribute.Path Implements System.Runtime.InteropServices._Attribute See Also ScenePathAttribute"
  },
  "api/Atlas.RangeDrawer.html": {
    "href": "api/Atlas.RangeDrawer.html",
    "title": "Class RangeDrawer | Atlas",
    "keywords": "Class RangeDrawer Handles inspector drawing for Range Inheritance System.Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer RangeDrawer Inherited Members UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomPropertyDrawer(typeof(Range))] public sealed class RangeDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/Atlas.Signal-1.html": {
    "href": "api/Atlas.Signal-1.html",
    "title": "Class Signal<T> | Atlas",
    "keywords": "Class Signal<T> Single-argument signal Inheritance System.Object SignalBase < ICommand <T>, System.Action <T>> Signal<T> Implements ISignal Inherited Members SignalBase<ICommand<T>, Action<T>>.AddCommand<TCommand>(TCommand) SignalBase<ICommand<T>, Action<T>>.AddCommand<TCommand>() SignalBase<ICommand<T>, Action<T>>.RemoveCommand<TCommand>() SignalBase<ICommand<T>, Action<T>>.AddListener(Action<T>) SignalBase<ICommand<T>, Action<T>>.RemoveListener(Action<T>) SignalBase<ICommand<T>, Action<T>>.m_commands SignalBase<ICommand<T>, Action<T>>.m_listeners Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class Signal<T> : SignalBase<ICommand<T>, Action<T>>, ISignal Type Parameters Name Description T Type of the signal's argument Examples namespace Atlas.Examples { public sealed class Example_Signal { public enum CharacterState { Alive, Dead } // signal declaration public class CharacterStateChangedSignal : Signal<CharacterState> { } // called externally to provide relevant dependencies public void OnInjectDependencies( CharacterStateChangedSignal signal ) { m_signal = signal; } public void TakeDamage( int damage ) { m_curHealth -= damage; if ( m_curHealth <= 0 ) { // dispatches state change to all listeners m_signal.Dispatch( CharacterState.Dead ); } } private CharacterStateChangedSignal m_signal; private int m_curHealth; } } Methods | Improve this Doc View Source Dispatch(T) Invokes the signal, calling all registered callback methods/commands Declaration public void Dispatch(T arg) Parameters Type Name Description T arg Argument to pass to the callbacks Implements ISignal"
  },
  "api/Atlas.Signal-2.html": {
    "href": "api/Atlas.Signal-2.html",
    "title": "Class Signal<T1, T2> | Atlas",
    "keywords": "Class Signal<T1, T2> Two-argument signal Inheritance System.Object SignalBase < ICommand <T1, T2>, System.Action <T1, T2>> Signal<T1, T2> Implements ISignal Inherited Members SignalBase<ICommand<T1, T2>, Action<T1, T2>>.AddCommand<TCommand>(TCommand) SignalBase<ICommand<T1, T2>, Action<T1, T2>>.AddCommand<TCommand>() SignalBase<ICommand<T1, T2>, Action<T1, T2>>.RemoveCommand<TCommand>() SignalBase<ICommand<T1, T2>, Action<T1, T2>>.AddListener(Action<T1, T2>) SignalBase<ICommand<T1, T2>, Action<T1, T2>>.RemoveListener(Action<T1, T2>) SignalBase<ICommand<T1, T2>, Action<T1, T2>>.m_commands SignalBase<ICommand<T1, T2>, Action<T1, T2>>.m_listeners Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class Signal<T1, T2> : SignalBase<ICommand<T1, T2>, Action<T1, T2>>, ISignal Type Parameters Name Description T1 First argument type T2 Second argument type Examples namespace Atlas.Examples { public sealed class Example_Signal { public enum CharacterState { Alive, Dead } // signal declaration public class CharacterStateChangedSignal : Signal<CharacterState> { } // called externally to provide relevant dependencies public void OnInjectDependencies( CharacterStateChangedSignal signal ) { m_signal = signal; } public void TakeDamage( int damage ) { m_curHealth -= damage; if ( m_curHealth <= 0 ) { // dispatches state change to all listeners m_signal.Dispatch( CharacterState.Dead ); } } private CharacterStateChangedSignal m_signal; private int m_curHealth; } } Methods | Improve this Doc View Source Dispatch(T1, T2) Invokes the signal, calling all registered callback methods/commands Declaration public void Dispatch(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 First argument to pass to the callbacks T2 arg2 Second argument to pass to the callbacks Implements ISignal"
  },
  "api/Atlas.StateLink.html": {
    "href": "api/Atlas.StateLink.html",
    "title": "Struct StateLink | Atlas",
    "keywords": "Struct StateLink A concrete object representing the link from one state to another Implements IStateLink Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct StateLink : IStateLink Constructors | Improve this Doc View Source StateLink(State, StateLink.TransitionCondition) Constructor Declaration public StateLink(State nextState, StateLink.TransitionCondition condition) Parameters Type Name Description State nextState The state to transition to when the condition satisfied StateLink.TransitionCondition condition The callback used to determine when a transition should occur Properties | Improve this Doc View Source IsSatisfied Whether or not a transition to NextState is desired Declaration public bool IsSatisfied { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NextState The state to transition to when the condition satisfied Declaration public State NextState { get; } Property Value Type Description State Implements IStateLink See Also IStateLink StateMachine"
  },
  "api/Atlas.StateMachine.html": {
    "href": "api/Atlas.StateMachine.html",
    "title": "Class StateMachine | Atlas",
    "keywords": "Class StateMachine A finite state machine data structure that executes states, and handles switching between them Inheritance System.Object StateMachine Implements IStateMachine ITickable Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class StateMachine : IStateMachine, ITickable Constructors | Improve this Doc View Source StateMachine() Constructor Declaration public StateMachine() Properties | Improve this Doc View Source CurrentState The state that's currently executing, or null if no state is running Declaration public State CurrentState { get; } Property Value Type Description State | Improve this Doc View Source PreviousState The state that was running before the current one, or null if no previous state exists Declaration public State PreviousState { get; } Property Value Type Description State Methods | Improve this Doc View Source AddState<StateType>(StateType) Adds the given state to the state machine Declaration public void AddState<StateType>(StateType state) where StateType : State Parameters Type Name Description StateType state The state to add Type Parameters Name Description StateType Type of state to add | Improve this Doc View Source GetState<StateType>() Gets the state of the given type. If multiple states exist with the given type, the first state of the desired type is returned. Declaration public StateType GetState<StateType>() where StateType : State Returns Type Description StateType The state with the given type Type Parameters Name Description StateType Type of state to get | Improve this Doc View Source RemoveState<StateType>() Removes the state of the given type. If multiple states exist with the given type, the first state of the desired type is removed. Declaration public void RemoveState<StateType>() where StateType : State Type Parameters Name Description StateType Type of state to remove | Improve this Doc View Source RevertToPrevState() Reverts the state machine to the previously running state Declaration public void RevertToPrevState() | Improve this Doc View Source SetState<StateType>() Sets the current state to the state of the desired type Declaration public void SetState<StateType>() where StateType : State Type Parameters Name Description StateType Type of state to change to | Improve this Doc View Source Tick() Updates the state machine Declaration public void Tick() Implements IStateMachine ITickable See Also StateMachineBehavior"
  },
  "api/Atlas.UIStack.html": {
    "href": "api/Atlas.UIStack.html",
    "title": "Class UIStack | Atlas",
    "keywords": "Class UIStack A stack data structure for management and presentation of UI Panels Inheritance System.Object UIStack Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public sealed class UIStack Constructors | Improve this Doc View Source UIStack() Constructor Declaration public UIStack() Properties | Improve this Doc View Source Count Number of panels currently in the stack Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Removes all panels from the stack. OnPop(Boolean) will not be called. Declaration public void Clear() | Improve this Doc View Source Contains(IUIPanel) Determines whether or not the given panel is contained within the stack Declaration public bool Contains(IUIPanel panel) Parameters Type Name Description IUIPanel panel The panel to check Returns Type Description System.Boolean True if the panel is in the stack, false otherwise | Improve this Doc View Source Peek() Returns the top IUIPanel Declaration public IUIPanel Peek() Returns Type Description IUIPanel The top panel | Improve this Doc View Source Pop() Removes the top panel from the stack, with full transitions Declaration public IUIPanel Pop() Returns Type Description IUIPanel The popped panel | Improve this Doc View Source Pop(UIStack.Transition) Removes the top panel from the stack, with the given transition(s) Declaration public IUIPanel Pop(UIStack.Transition transition) Parameters Type Name Description UIStack.Transition transition Type of transition(s) to play Returns Type Description IUIPanel The popped panel | Improve this Doc View Source Push(IUIPanel) Pushes the given panel onto the top of the stack, hiding all current panels, with full transitions Declaration public void Push(IUIPanel panel) Parameters Type Name Description IUIPanel panel The panel to push | Improve this Doc View Source Push(IUIPanel, UIStack.Transition) Pushes the given panel onto the top of the stack, hiding all current panels using the given transitions Declaration public void Push(IUIPanel panel, UIStack.Transition transition) Parameters Type Name Description IUIPanel panel The panel to push UIStack.Transition transition Type of transition(s) to play"
  },
  "api/Atlas.html": {
    "href": "api/Atlas.html",
    "title": "Namespace Atlas | Atlas",
    "keywords": "Namespace Atlas Classes BackEase BitField A utility class to aid in working with bit fields BounceEase CircularEase CubicEase DebugDraw A system for rendering debug elements in the game view, as well as the scene view. Options to enable in the editor or in standalone builds can be found in the Atlas preferences window. DebugDrawModifierExtensions Helpful extension methods to make working with IDebugDrawer more user-friendly DebugExtensions Ease A serializable class for simplifying easing/tweening workflow EditorGUILayoutUtils EditorUtils Effect Manages activation and destruction of all effect emitters ( EffectEmitterBase ) that comprise a game effect. Bundling all elements of an effect into one self-contained, reusable package can be make working with effects that contain various components easier, such as audio, particles, haptics, etc. EffectEmitterBase Base emitter class to be used with the Effect system ElasticEase EnumExtensions Extension methods for the System.Enum class ExponentialEase GizmoUtils GUIListener A singleton class for registering and executing callbacks in Unity's OnGUI. Since simply including the OnGUI method in a UnityEngine.MonoBehaviour will cause undesirable heap allocations, this class is meant to collect those calls into one place, which can be disabled in live builds or even lazily instantiated for rendering debug information only when necessary. HashCode A utility class to aid in working with hashcodes IndexedPriorityQueue<T> Generic priority queue data structure, providing random access to its elements LinearEase MaxValueAttribute Sets a maximum value for the target field. Automatically prevents assigning a value greater than the specified value when editing the field in the inspector window MaxValuePropertyDrawer Handles inspector drawing for MaxValueAttribute MinValueAttribute Sets a minimum value for the target field. Automatically prevents assigning a value less than the specified value when editing the field in the inspector window MinValuePropertyDrawer Handles inspector drawing for MinValueAttribute ParticleEffectEmitter Effect emitter for handling particle effect emissions PathAttribute Marks a target string field as a folder path, and automatically provides a button next to the field in the inspector window that opens your system's folder browser PathAttributePropertyDrawer Handles inspector drawing for PathAttribute PreventEditInInspectorAttribute Prevents the target field from being edited in the inspector window while still maintaining its visiblity PreventEditInInspectorPropertyDrawer Handles inspector drawing for PreventEditInInspectorAttribute QuadraticEase QuarticEase QuinticEase RangeDrawer Handles inspector drawing for Range ScenePathAttribute Marks the target string field as a scene path, and automatically provides a dropdown in the inspector listing all scenes contained within the project. If the scene has not yet been added to build settings, an inspector warning is displayed with the ability to add it immediately ScenePathAttributePropertyDrawer Handles inspector drawing for ScenePathAttribute ScriptingDefines Helper class for adding/removing scripting define symbols Signal Zero-argument signal Signal<T> Single-argument signal Signal<T1, T2> Two-argument signal Signal<T1, T2, T3> Three-argument signal Signal<T1, T2, T3, T4> Four-argument signal SignalBase<TCommandBase, TAction> Base signal class that provides a shared listener management for simpler derived signals SignalManager<TKey> A simple signal container meant to make dispatching and managing signal listeners across various systems easier SineEase SingletonBehavior<TDerived> Base class that applies the singleton design pattern to a UnityEngine.MonoBehaviour , providing a shared instance of the given type State Represents a single state within a IStateMachine StateMachine A finite state machine data structure that executes states, and handles switching between them StateMachineBehavior The UnityEngine.MonoBehaviour derivative of a StateMachine TaskScheduler Handles scheduling and distributing task execution between frames, attempting to balance frame-by-frame execution so one frame isn't heavier than the another. TransformEditor Overrides the default Transform editor that adds handy buttons for resetting transform values TypeExtensions Extension methods for the System.Type class UIStack A stack data structure for management and presentation of UI Panels Structs BillboardDebugDrawModifier Causes the modified IDebugDrawer to get rendered facing the given camera CircleDebugDrawer Debug circle element CrossDebugDrawer Debug cross (X) element GUIColorScope A handy scope variable that sets UnityEngine.GUI.color to the given color, and automatically resets it to its original color when the scope ends LineDebugDrawer Debug line element ProfilerScope A handy scope variable that starts a UnityEngine.Profiling.Profiler sample, and ends it when the scope ends Range Represents a closed mathematical interval of float values RectangleDebugDrawer Debug rectangle element StateLink A concrete object representing the link from one state to another TextDebugDrawer Debug text element TextIndentHelper A helper object for making text indentation management easier, particularly when working with code generation TimedDebugDrawModifier Causes the modified IDebugDrawer to render for the given amount of time Timer Provides a simple interface for measuring elapsed time in seconds TransformDebugDrawModifier Transforms the given IDebugDrawer into world space Interfaces ICommand Interface for creating object-based method callbacks ICommand<T> Interface for creating object-based method callbacks with a single argument ICommand<T1, T2> Interface for creating object-based method callbacks with two argument ICommand<T1, T2, T3> Interface for creating object-based method callbacks with three argument ICommand<T1, T2, T3, T4> Interface for creating object-based method callbacks with four argument IDebugDrawer Interface for debug draw elements IFixedTickable A helper for providing a shared interface for updating objects in Unity's FixedUpdate ILateTickable A helper for providing a shared interface for updating objects in Unity's LateUpdate IScheduledTask Interface for tasks used when scheduling execution ISignal IStateLink Interface for objects that represent links between State s in a StateMachine IStateMachine ITickable A helper for providing a shared interface for updating objects IUIPanel Interface for UI panels, meant to be used when managed by a UIStack Enums AnchorPosition An enumeration for various types of UI anchoring positions EaseType Effect.ActivationEventType Event defining how the effect will be activated Effect.DestructionEventType Event defining how the effect will be destroyed PathAttribute.Path Type of path target to represent PathAttribute.Relativity Folder path relativity type TimeScale Types of time scales used to reference Unity's various UnityEngine.Time methods UIStack.Transition Types of panel transitions Delegates StateLink.TransitionCondition The callback for determining whether or not this link's transition condition is satisfied"
  },
  "api/Atlas.BillboardDebugDrawModifier.html": {
    "href": "api/Atlas.BillboardDebugDrawModifier.html",
    "title": "Struct BillboardDebugDrawModifier | Atlas",
    "keywords": "Struct BillboardDebugDrawModifier Causes the modified IDebugDrawer to get rendered facing the given camera Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct BillboardDebugDrawModifier : IDebugDrawer Constructors | Improve this Doc View Source BillboardDebugDrawModifier(IDebugDrawer, Vector3) Constructor, automatically uses UnityEngine.Camera.main for billboarding Declaration public BillboardDebugDrawModifier(IDebugDrawer drawer, Vector3 position) Parameters Type Name Description IDebugDrawer drawer The drawer to modify UnityEngine.Vector3 position The position of the element | Improve this Doc View Source BillboardDebugDrawModifier(IDebugDrawer, Vector3, Camera) Constructor Declaration public BillboardDebugDrawModifier(IDebugDrawer drawer, Vector3 position, Camera camera) Parameters Type Name Description IDebugDrawer drawer The drawer to modify UnityEngine.Vector3 position The position of the element UnityEngine.Camera camera The camera to face the element toward Properties | Improve this Doc View Source Color Color of the modified element Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not the modified element has finished drawing Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the modified element Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.EffectEmitterBase.html": {
    "href": "api/Atlas.EffectEmitterBase.html",
    "title": "Class EffectEmitterBase | Atlas",
    "keywords": "Class EffectEmitterBase Base emitter class to be used with the Effect system Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EffectEmitterBase ParticleEffectEmitter Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public abstract class EffectEmitterBase : MonoBehaviour Properties | Improve this Doc View Source IsFinished Whether or not the emitter has finished emitting Declaration protected abstract bool IsFinished { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPlaying Whether or not the effect is currently playing Declaration public bool IsPlaying { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Play() Plays the emitter Declaration public virtual void Play() | Improve this Doc View Source Stop() Stops the emitter Declaration public virtual void Stop() | Improve this Doc View Source Update() Updates the emitter, called once per frame Declaration protected virtual void Update() Events | Improve this Doc View Source EmissionFinishedEvent Event that gets fired when the effect has finished emitting Declaration public event Action EmissionFinishedEvent Event Type Type Description System.Action"
  },
  "api/Atlas.Signal-3.html": {
    "href": "api/Atlas.Signal-3.html",
    "title": "Class Signal<T1, T2, T3> | Atlas",
    "keywords": "Class Signal<T1, T2, T3> Three-argument signal Inheritance System.Object SignalBase < ICommand <T1, T2, T3>, System.Action <T1, T2, T3>> Signal<T1, T2, T3> Implements ISignal Inherited Members SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.AddCommand<TCommand>(TCommand) SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.AddCommand<TCommand>() SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.RemoveCommand<TCommand>() SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.AddListener(Action<T1, T2, T3>) SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.RemoveListener(Action<T1, T2, T3>) SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.m_commands SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>.m_listeners Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class Signal<T1, T2, T3> : SignalBase<ICommand<T1, T2, T3>, Action<T1, T2, T3>>, ISignal Type Parameters Name Description T1 First argument type T2 Second argument type T3 Third argument type Examples namespace Atlas.Examples { public sealed class Example_Signal { public enum CharacterState { Alive, Dead } // signal declaration public class CharacterStateChangedSignal : Signal<CharacterState> { } // called externally to provide relevant dependencies public void OnInjectDependencies( CharacterStateChangedSignal signal ) { m_signal = signal; } public void TakeDamage( int damage ) { m_curHealth -= damage; if ( m_curHealth <= 0 ) { // dispatches state change to all listeners m_signal.Dispatch( CharacterState.Dead ); } } private CharacterStateChangedSignal m_signal; private int m_curHealth; } } Methods | Improve this Doc View Source Dispatch(T1, T2, T3) Invokes the signal, calling all registered callback methods/commands Declaration public void Dispatch(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 First argument to pass to the callbacks T2 arg2 Second argument to pass to the callbacks T3 arg3 Third argument to pass to the callbacks Implements ISignal"
  },
  "api/Atlas.StateMachineBehavior.html": {
    "href": "api/Atlas.StateMachineBehavior.html",
    "title": "Class StateMachineBehavior | Atlas",
    "keywords": "Class StateMachineBehavior The UnityEngine.MonoBehaviour derivative of a StateMachine Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour StateMachineBehavior Implements IStateMachine Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public class StateMachineBehavior : MonoBehaviour, IStateMachine Properties | Improve this Doc View Source CurrentState The state that's currently executing, or null if no state is running Declaration public State CurrentState { get; } Property Value Type Description State | Improve this Doc View Source PreviousState The state that was running before the current one, or null if no previous state exists Declaration public State PreviousState { get; } Property Value Type Description State Methods | Improve this Doc View Source AddState<StateType>(StateType) Adds the given state to the state machine Declaration public void AddState<StateType>(StateType state) where StateType : State Parameters Type Name Description StateType state The state to add Type Parameters Name Description StateType Type of state to add | Improve this Doc View Source GetState<StateType>() Gets the state of the given type. If multiple states exist with the given type, the first state of the desired type is returned. Declaration public StateType GetState<StateType>() where StateType : State Returns Type Description StateType The state with the given type Type Parameters Name Description StateType Type of state to get | Improve this Doc View Source RemoveState<StateType>() Removes the state of the given type. If multiple states exist with the given type, the first state of the desired type is removed. Declaration public void RemoveState<StateType>() where StateType : State Type Parameters Name Description StateType Type of state to remove | Improve this Doc View Source RevertToPrevState() Reverts the state machine to the previously running state Declaration public void RevertToPrevState() | Improve this Doc View Source SetState<StateType>() Sets the current state to the state of the desired type Declaration public void SetState<StateType>() where StateType : State Type Parameters Name Description StateType Type of state to change to | Improve this Doc View Source Tick() Updates the state machine, called in Update() automatically Declaration public void Tick() | Improve this Doc View Source Update() Updates the state machine, called by Unity Declaration protected virtual void Update() Implements IStateMachine See Also StateMachine"
  },
  "user-manual/Easing.html": {
    "href": "user-manual/Easing.html",
    "title": "Easing | Atlas",
    "keywords": "Easing"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "This is the API HOMEPAGE. | Atlas",
    "keywords": "This is the API HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "api/Atlas.PathAttribute.Relativity.html": {
    "href": "api/Atlas.PathAttribute.Relativity.html",
    "title": "Enum PathAttribute.Relativity | Atlas",
    "keywords": "Enum PathAttribute.Relativity Folder path relativity type Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum Relativity Fields Name Description Absolute The full path e.g. \"C:/Users/MichaelScott/Documents/\" AssetsRelative Uses a path that is relative to the project's Assets folder e.g. \"Scripts/Runtime/\" ProjectRelative Uses a path that is relative to the project's root folder e.g. \"Assets/Scripts/Runtime/\" Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.Range.html": {
    "href": "api/Atlas.Range.html",
    "title": "Struct Range | Atlas",
    "keywords": "Struct Range Represents a closed mathematical interval of float values Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [Serializable] public struct Range Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_Range { // generic character class public class Character { public void ApplyDamage( float damage ) { /* ... */ } } public void OnCharacterHit( Character hitCharacter ) { // get randomized damage amount float damageAmount = m_damageRange.GetRandomValue(); // apply damage hitCharacter.ApplyDamage( damageAmount ); } // range declaration [SerializeField] private Range m_damageRange = new Range() { m_minValue = 6f, m_maxValue = 20f }; } } Fields | Improve this Doc View Source m_maxValue The maximum value of the range (inclusive) Declaration public float m_maxValue Field Value Type Description System.Single | Improve this Doc View Source m_minValue The minimum value of the range (inclusive) Declaration public float m_minValue Field Value Type Description System.Single Methods | Improve this Doc View Source Clamp(Single) Clamps the given value between the range Declaration public float Clamp(float value) Parameters Type Name Description System.Single value The value to clamp Returns Type Description System.Single If the value is within the range, the value is returned unchanged. Otherwise, a value clamped to the range limits is returned. | Improve this Doc View Source Contains(Range) Determines whether or not the given range value is contained within this numerical range (inclusive) Declaration public bool Contains(Range range) Parameters Type Name Description Range range The range value to determine Returns Type Description System.Boolean Whether or not the range value is contained | Improve this Doc View Source Contains(Single) Determines whether or not the given value is within this numerical range (inclusive) Declaration public bool Contains(float value) Parameters Type Name Description System.Single value The value to determine Returns Type Description System.Boolean Whether or not the value is within the range | Improve this Doc View Source GetLerpedValue(Single) Returns a linearly interpolated value between m_minValue and m_maxValue where an input t of 0 will return m_minValue , and an input of 1 will return m_maxValue Declaration public float GetLerpedValue(float t) Parameters Type Name Description System.Single t The value to interpulate normalized to [0, 1] Returns Type Description System.Single The linearly interpolated value | Improve this Doc View Source GetNormalizedValue(Single) Calculates a value representing the normalized position of the provided value within the range, clamped to [0, 1] Declaration public float GetNormalizedValue(float value) Parameters Type Name Description System.Single value The value to normalize Returns Type Description System.Single The normalized value | Improve this Doc View Source GetRandomValue() Returns a random number between m_minValue (inclusive) and m_maxValue (inclusive) Declaration public float GetRandomValue() Returns Type Description System.Single A random value within the range | Improve this Doc View Source IntersectionWith(Range) Calculates the range of values where this range overlaps with the given range . If the ranges don't overlap, an invalid range is returned. Declaration public Range IntersectionWith(Range range) Parameters Type Name Description Range range The range to intersect with Returns Type Description Range The intersecting range | Improve this Doc View Source Intersects(Range) Determines whether or not the given range value overlaps this range Declaration public bool Intersects(Range range) Parameters Type Name Description Range range The range value to test Returns Type Description System.Boolean Whether or not the ranges overlap eachother | Improve this Doc View Source UnionWith(Range) Combines the range with the given range into a mathematical union, creating a range that spans both ranges Declaration public Range UnionWith(Range range) Parameters Type Name Description Range range The range to union with Returns Type Description Range The combined range"
  },
  "api/Atlas.ScenePathAttributePropertyDrawer.html": {
    "href": "api/Atlas.ScenePathAttributePropertyDrawer.html",
    "title": "Class ScenePathAttributePropertyDrawer | Atlas",
    "keywords": "Class ScenePathAttributePropertyDrawer Handles inspector drawing for ScenePathAttribute Inheritance System.Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer ScenePathAttributePropertyDrawer Inherited Members UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomPropertyDrawer(typeof(ScenePathAttribute))] public sealed class ScenePathAttributePropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEditor.SerializedProperty property UnityEngine.GUIContent label Returns Type Description System.Single Overrides UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/Atlas.ScriptingDefines.html": {
    "href": "api/Atlas.ScriptingDefines.html",
    "title": "Class ScriptingDefines | Atlas",
    "keywords": "Class ScriptingDefines Helper class for adding/removing scripting define symbols Inheritance System.Object ScriptingDefines Namespace : Atlas Assembly : Atlas.Editor.dll Syntax public static class ScriptingDefines Methods | Improve this Doc View Source AddSymbol(String) Adds the given preprocessor definition to the PlayerSettings for all valid build groups Declaration public static void AddSymbol(string symbol) Parameters Type Name Description System.String symbol Preprocessor symbol to add | Improve this Doc View Source AddSymbol(BuildTargetGroup, String) Adds the given preprocessor definition to the PlayerSettings for the given build group Declaration public static void AddSymbol(BuildTargetGroup group, string symbol) Parameters Type Name Description UnityEditor.BuildTargetGroup group Build group to add the symbol to System.String symbol Preprocessor symbol to add | Improve this Doc View Source ContainsSymbol(String) Determines if the current build group has the given symbol defined Declaration public static bool ContainsSymbol(string symbol) Parameters Type Name Description System.String symbol Preprocessor symbol to check for Returns Type Description System.Boolean true if the symbol is define, false if not | Improve this Doc View Source ContainsSymbol(BuildTargetGroup, String) Determines if the given target group has the given symbol defined Declaration public static bool ContainsSymbol(BuildTargetGroup group, string symbol) Parameters Type Name Description UnityEditor.BuildTargetGroup group Build group to check System.String symbol Preprocessor symbol to check for Returns Type Description System.Boolean true if the symbol is define, false if not | Improve this Doc View Source IsGroupValid(BuildTargetGroup) Checks if the given group is valid Declaration public static bool IsGroupValid(BuildTargetGroup group) Parameters Type Name Description UnityEditor.BuildTargetGroup group The group to check Returns Type Description System.Boolean true if valid, false if invalid | Improve this Doc View Source RemoveSymbol(String) Removes the given preprocessor definition from the PlayerSettings for all valid build groups Declaration public static void RemoveSymbol(string symbol) Parameters Type Name Description System.String symbol Preprocessor symbol to add | Improve this Doc View Source RemoveSymbol(BuildTargetGroup, String) Removes the given preprocessor definition from the PlayerSettings for the given build groups Declaration public static void RemoveSymbol(BuildTargetGroup group, string symbol) Parameters Type Name Description UnityEditor.BuildTargetGroup group Build group to remove the symbol from System.String symbol Preprocessor symbol to add"
  },
  "api/Atlas.BitField.html": {
    "href": "api/Atlas.BitField.html",
    "title": "Class BitField | Atlas",
    "keywords": "Class BitField A utility class to aid in working with bit fields Inheritance System.Object BitField Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class BitField Examples namespace Atlas.Examples { public sealed class Example_BitField { public enum Flags { A = 1 << 1, // 0001 B = 1 << 2, // 0010 C = 1 << 3, // 0100 } public static void Example() { // create a bit field with the 'A' and 'C' flags set (0101) Flags field = Flags.A | Flags.C; // checks if the 'A' bit is enabled if ( BitField.IsFlagSet( field, Flags.A ) ) { // clears only the bit representing 'C' BitField.ClearFlag( field, Flags.C ); } } } } Methods | Improve this Doc View Source ClearFlag(Enum, Enum) Clears a flag in the given field Declaration public static int ClearFlag(Enum bitField, Enum flag) Parameters Type Name Description System.Enum bitField Bit field to modify System.Enum flag The target flag to clear Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source ClearFlag(Int32, Enum) Clears a flag in the given field Declaration public static int ClearFlag(int bitField, Enum flag) Parameters Type Name Description System.Int32 bitField Bit field to modify System.Enum flag The target flag to clear Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source ClearFlag(Int32, Int32) Clears a flag in the given field Declaration public static int ClearFlag(int bitField, int flag) Parameters Type Name Description System.Int32 bitField Bit field to modify System.Int32 flag The target flag to clear Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source IsFlagSet(Enum, Enum) Determines whether or not the flag is set in the given bit field Declaration public static bool IsFlagSet(Enum bitField, Enum flag) Parameters Type Name Description System.Enum bitField The bit field to check System.Enum flag The target flag to look for Returns Type Description System.Boolean True if the flag is set, false if not | Improve this Doc View Source IsFlagSet(Int32, Enum) Determines whether or not the flag is set in the given bit field Declaration public static bool IsFlagSet(int bitField, Enum flag) Parameters Type Name Description System.Int32 bitField The bit field to check System.Enum flag The target flag to look for Returns Type Description System.Boolean True if the flag is set, false if not | Improve this Doc View Source IsFlagSet(Int32, Int32) Determines whether or not the flag is set in the given bit field Declaration public static bool IsFlagSet(int bitField, int flag) Parameters Type Name Description System.Int32 bitField The bit field to check System.Int32 flag The target flag to look for Returns Type Description System.Boolean True if the flag is set, false if not | Improve this Doc View Source SetFlag(Enum, Enum) Sets a flag in the given field Declaration public static int SetFlag(Enum bitField, Enum flag) Parameters Type Name Description System.Enum bitField Bit field to modify System.Enum flag The target flag to set Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source SetFlag(Int32, Enum) Sets a flag in the given field Declaration public static int SetFlag(int bitField, Enum flag) Parameters Type Name Description System.Int32 bitField Bit field to modify System.Enum flag The target flag to set Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source SetFlag(Int32, Int32) Sets a flag in the given field Declaration public static int SetFlag(int bitField, int flag) Parameters Type Name Description System.Int32 bitField Bit field to modify System.Int32 flag The target flag to set Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source SetFlag(Int32, Int32, Boolean) Sets a flag in the given field Declaration public static int SetFlag(int bitField, int flag, bool value) Parameters Type Name Description System.Int32 bitField Bit field to modify System.Int32 flag The target flag to set System.Boolean value The value to set the flag to Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source ToggleFlag(Enum, Enum) Toggles a flag in the given field Declaration public static int ToggleFlag(Enum bitField, Enum flag) Parameters Type Name Description System.Enum bitField The bit field to modify System.Enum flag The target flag to toggle Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source ToggleFlag(Int32, Enum) Toggles a flag in the given field Declaration public static int ToggleFlag(int bitField, Enum flag) Parameters Type Name Description System.Int32 bitField The bit field to modify System.Enum flag The target flag to toggle Returns Type Description System.Int32 The modified bit field | Improve this Doc View Source ToggleFlag(Int32, Int32) Toggles a flag in the given field Declaration public static int ToggleFlag(int bitField, int flag) Parameters Type Name Description System.Int32 bitField The bit field to modify System.Int32 flag The target flag to toggle Returns Type Description System.Int32 The modified bit field"
  },
  "api/Atlas.EaseType.html": {
    "href": "api/Atlas.EaseType.html",
    "title": "Enum EaseType | Atlas",
    "keywords": "Enum EaseType Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum EaseType Fields Name Description BackIn BackInOut BackOut BounceIn BounceInOut BounceOut CircularIn CircularInOut CircularOut CubicIn CubicInOut CubicOut ElasticIn ElasticInOut ElasticOut ExponentialIn ExponentialInOut ExponentialOut LinearIn LinearInOut LinearOut QuadraticIn QuadraticInOut QuadraticOut QuarticIn QuarticInOut QuarticOut QuinticIn QuinticInOut QuinticOut SineIn SineInOut SineOut Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.ICommand-2.html": {
    "href": "api/Atlas.ICommand-2.html",
    "title": "Interface ICommand<T1, T2> | Atlas",
    "keywords": "Interface ICommand<T1, T2> Interface for creating object-based method callbacks with two argument Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ICommand<T1, T2> Type Parameters Name Description T1 T2 Examples namespace Atlas.Examples { public sealed class Example_Command { // command declaration public struct ExampleCommand : ICommand<float> { public void Execute( float value ) { UnityEngine.Debug.LogFormat( \"Command executed with value of {0}\", value ); } } public void OnInjectDependencies( Signal<float> exampleSignal ) { // instantiate a command object ExampleCommand command = new ExampleCommand(); // register a command as a listener of the signal exampleSignal.AddCommand( command ); // ... // further calls to exampleSignal.Dispatch( float value ) will also // invoke command.Execute( float value ) } } } Methods | Improve this Doc View Source Execute(T1, T2) Executes the object. When registered with a Signal<T1, T2> , this will get called upon Dispatch(T1, T2) Declaration void Execute(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 T2 arg2 See Also Signal <T1, T2>"
  },
  "api/Atlas.CrossDebugDrawer.html": {
    "href": "api/Atlas.CrossDebugDrawer.html",
    "title": "Struct CrossDebugDrawer | Atlas",
    "keywords": "Struct CrossDebugDrawer Debug cross (X) element Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct CrossDebugDrawer : IDebugDrawer Constructors | Improve this Doc View Source CrossDebugDrawer(Single, Color) Constructor Declaration public CrossDebugDrawer(float lineLength, Color color) Parameters Type Name Description System.Single lineLength Length of each line UnityEngine.Color color Color of the cross Properties | Improve this Doc View Source Color The color of the cross Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not this drawer has finished drawing yet Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the cross Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.DebugExtensions.html": {
    "href": "api/Atlas.DebugExtensions.html",
    "title": "Class DebugExtensions | Atlas",
    "keywords": "Class DebugExtensions Inheritance System.Object DebugExtensions Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class DebugExtensions Methods | Improve this Doc View Source DrawX(Vector3, Single) Declaration public static void DrawX(Vector3 pos, float lineLength) Parameters Type Name Description UnityEngine.Vector3 pos System.Single lineLength | Improve this Doc View Source DrawX(Vector3, Single, Color) Declaration public static void DrawX(Vector3 pos, float lineLength, Color color) Parameters Type Name Description UnityEngine.Vector3 pos System.Single lineLength UnityEngine.Color color"
  },
  "api/Atlas.Effect.ActivationEventType.html": {
    "href": "api/Atlas.Effect.ActivationEventType.html",
    "title": "Enum Effect.ActivationEventType | Atlas",
    "keywords": "Enum Effect.ActivationEventType Event defining how the effect will be activated Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public enum ActivationEventType Fields Name Description Manual Manually activate via code (by calling Play() ) Start Activate on Start Extension Methods EnumExtensions.IsObsolete()"
  },
  "api/Atlas.GizmoUtils.html": {
    "href": "api/Atlas.GizmoUtils.html",
    "title": "Class GizmoUtils | Atlas",
    "keywords": "Class GizmoUtils Inheritance System.Object GizmoUtils Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public static class GizmoUtils Methods | Improve this Doc View Source DrawCircle(Vector3, Single, Vector3, Int32) Declaration public static void DrawCircle(Vector3 pos, float radius, Vector3 axis, int numSegments = 20) Parameters Type Name Description UnityEngine.Vector3 pos System.Single radius UnityEngine.Vector3 axis System.Int32 numSegments"
  },
  "api/Atlas.ITickable.html": {
    "href": "api/Atlas.ITickable.html",
    "title": "Interface ITickable | Atlas",
    "keywords": "Interface ITickable A helper for providing a shared interface for updating objects Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ITickable Methods | Improve this Doc View Source Tick() Intended to be called every update cycle Declaration void Tick()"
  },
  "api/Atlas.MinValueAttribute.html": {
    "href": "api/Atlas.MinValueAttribute.html",
    "title": "Class MinValueAttribute | Atlas",
    "keywords": "Class MinValueAttribute Sets a minimum value for the target field. Automatically prevents assigning a value less than the specified value when editing the field in the inspector window Inheritance System.Object System.Attribute UnityEngine.PropertyAttribute MinValueAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members UnityEngine.PropertyAttribute.order Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class MinValueAttribute : PropertyAttribute, _Attribute Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_MinValueAttribute : MonoBehaviour { // prevents assigning values < 0 in the inspector [SerializeField, MinValue( 0.0f )] private float m_value; } } Constructors | Improve this Doc View Source MinValueAttribute(Single) Constructor Declaration public MinValueAttribute(float minValue) Parameters Type Name Description System.Single minValue The minimum allowable value the field can have Properties | Improve this Doc View Source MinValue The minimum allowable value the field can have Declaration public float MinValue { get; } Property Value Type Description System.Single Implements System.Runtime.InteropServices._Attribute See Also MaxValueAttribute"
  },
  "api/Atlas.PathAttributePropertyDrawer.html": {
    "href": "api/Atlas.PathAttributePropertyDrawer.html",
    "title": "Class PathAttributePropertyDrawer | Atlas",
    "keywords": "Class PathAttributePropertyDrawer Handles inspector drawing for PathAttribute Inheritance System.Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer PathAttributePropertyDrawer Inherited Members UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : Atlas Assembly : Atlas.Editor.dll Syntax [CustomPropertyDrawer(typeof(PathAttribute))] public sealed class PathAttributePropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/Atlas.RectangleDebugDrawer.html": {
    "href": "api/Atlas.RectangleDebugDrawer.html",
    "title": "Struct RectangleDebugDrawer | Atlas",
    "keywords": "Struct RectangleDebugDrawer Debug rectangle element Implements IDebugDrawer Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct RectangleDebugDrawer : IDebugDrawer Constructors | Improve this Doc View Source RectangleDebugDrawer(Single, Single, Color) Constructor Declaration public RectangleDebugDrawer(float width, float height, Color color) Parameters Type Name Description System.Single width Width of the rectangle System.Single height Height of the rectangle UnityEngine.Color color Color of the rectangle Properties | Improve this Doc View Source Color Color of the rectangle Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color | Improve this Doc View Source IsFinished Whether or not this drawer has finished drawing yet Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw() Draws the rectangle Declaration public void Draw() Implements IDebugDrawer Extension Methods DebugDrawModifierExtensions.Timed(IDebugDrawer, Single) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Transformed(IDebugDrawer, Vector3, Quaternion) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3) DebugDrawModifierExtensions.Billboarded(IDebugDrawer, Vector3, Camera) See Also DebugDraw"
  },
  "api/Atlas.ScenePathAttribute.html": {
    "href": "api/Atlas.ScenePathAttribute.html",
    "title": "Class ScenePathAttribute | Atlas",
    "keywords": "Class ScenePathAttribute Marks the target string field as a scene path, and automatically provides a dropdown in the inspector listing all scenes contained within the project. If the scene has not yet been added to build settings, an inspector warning is displayed with the ability to add it immediately Inheritance System.Object System.Attribute UnityEngine.PropertyAttribute ScenePathAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members UnityEngine.PropertyAttribute.order Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class ScenePathAttribute : PropertyAttribute, _Attribute Examples using UnityEngine; using UnityEngine.SceneManagement; namespace Atlas.Examples { public sealed class Example_ScenePathAttribute : MonoBehaviour { // displays dropdown of scene names in inspector [SerializeField, ScenePath] private string m_scenePath; private void LoadScene() { // editor automatically prepares string for use with LoadScene SceneManager.LoadScene( m_scenePath ); } } } Implements System.Runtime.InteropServices._Attribute See Also PathAttribute"
  },
  "api/Atlas.EditorUtils.html": {
    "href": "api/Atlas.EditorUtils.html",
    "title": "Class EditorUtils | Atlas",
    "keywords": "Class EditorUtils Inheritance System.Object EditorUtils Namespace : Atlas Assembly : Atlas.Editor.dll Syntax public static class EditorUtils Properties | Improve this Doc View Source HideTools Whether or not the default editor tools (scale, rotate, translate, rect) are hidden Declaration public static bool HideTools { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Atlas.Effect.html": {
    "href": "api/Atlas.Effect.html",
    "title": "Class Effect | Atlas",
    "keywords": "Class Effect Manages activation and destruction of all effect emitters ( EffectEmitterBase ) that comprise a game effect. Bundling all elements of an effect into one self-contained, reusable package can be make working with effects that contain various components easier, such as audio, particles, haptics, etc. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Effect Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public sealed class Effect : MonoBehaviour Properties | Improve this Doc View Source ActivationEvent When the effect will be activated Declaration public Effect.ActivationEventType ActivationEvent { get; } Property Value Type Description Effect.ActivationEventType | Improve this Doc View Source DestructionEvent When the effect will be destroyed Declaration public Effect.DestructionEventType DestructionEvent { get; } Property Value Type Description Effect.DestructionEventType | Improve this Doc View Source IsPlaying Whether or not the effect is currently playing Declaration public bool IsPlaying { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Play() Begins playing all child emitters Declaration public void Play() | Improve this Doc View Source Stop() Stops all child emitters Declaration public void Stop() See Also EffectEmitterBase"
  },
  "api/Atlas.GUIColorScope.html": {
    "href": "api/Atlas.GUIColorScope.html",
    "title": "Struct GUIColorScope | Atlas",
    "keywords": "Struct GUIColorScope A handy scope variable that sets UnityEngine.GUI.color to the given color, and automatically resets it to its original color when the scope ends Implements System.IDisposable Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public struct GUIColorScope : IDisposable Examples using UnityEngine; namespace Atlas.Examples { public sealed class Example_GUIColorScope : MonoBehaviour { private void OnGUI() { GUILayout.Label( \"Atlas rules (default color)\" ); using ( new GUIColorScope( Color.red ) ) { GUILayout.Label( \"Atlas rules (red)\" ); } GUILayout.Label( \"Atlas rules (default color)\" ); } } } Constructors | Improve this Doc View Source GUIColorScope(Color) Constructor Declaration public GUIColorScope(Color color) Parameters Type Name Description UnityEngine.Color color The target color Methods | Improve this Doc View Source Dispose() Ends the scope Declaration public void Dispose() Implements System.IDisposable See Also ProfilerScope"
  },
  "api/Atlas.ICommand.html": {
    "href": "api/Atlas.ICommand.html",
    "title": "Interface ICommand | Atlas",
    "keywords": "Interface ICommand Interface for creating object-based method callbacks Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ICommand Examples namespace Atlas.Examples { public sealed class Example_Command { // command declaration public struct ExampleCommand : ICommand<float> { public void Execute( float value ) { UnityEngine.Debug.LogFormat( \"Command executed with value of {0}\", value ); } } public void OnInjectDependencies( Signal<float> exampleSignal ) { // instantiate a command object ExampleCommand command = new ExampleCommand(); // register a command as a listener of the signal exampleSignal.AddCommand( command ); // ... // further calls to exampleSignal.Dispatch( float value ) will also // invoke command.Execute( float value ) } } } Methods | Improve this Doc View Source Execute() Executes the object. When registered with a Signal , this will get called upon Dispatch() Declaration void Execute() See Also Signal"
  },
  "api/Atlas.ISignal.html": {
    "href": "api/Atlas.ISignal.html",
    "title": "Interface ISignal | Atlas",
    "keywords": "Interface ISignal Namespace : Atlas Assembly : Atlas.Runtime.dll Syntax public interface ISignal"
  },
  "user-manual/Intro.html": {
    "href": "user-manual/Intro.html",
    "title": "Atlas 👩‍🚀 | Atlas",
    "keywords": "Atlas 👩‍🚀 A C# utility and helper library for Unity. The user manual is a work in progress, and will be expanded upon soon. For now, make sure to check out the API reference for documentation and usage examples. Summary Atlas is a library of reusable classes and tools designed to jump-start your Unity project by providing solutions for common tasks, and extending/augmenting the features of Unity and C#. Feature Overview Game view debug drawing Easing Inspector attributes Timers Singletons Signals Effect emitters State machines Editor helpers UI stack Installation Import using the Package Manager (Unity 2019.1+) Add \"com.davidknopp.atlas\": \"https://github.com/david-knopp/Atlas.git#ReleasePackage\", under the \"dependencies\" section of your project's manifest.json file, which should be located under the \"Packages\" folder in your project's root directory. Upon running Unity, Atlas should then be downloaded automatically. Note: to use this method, Git must be installed on the user machine and the Git executable path should be listed in the PATH system environment variable as explained on the Unity forum . Import the Unity Package Download the latest .unitypackage from the releases page . Then, simply drag and drop the package into your Unity project. In an effort to keep your project tidy, Atlas will place itself in Assets/ThirdParty/Atlas/ , but can be moved freely afterward, as nothing within the library depends upon this directory. Copy/paste the source folders Download or clone the latest master branch, then copy the assets contained at Assets/Scripts/ of the Atlas project into your Unity project. Mix & Match Many of the files & classes contained within Atlas are modular and can be used on their own without any other dependencies. Therefore, individual files can be taken at will from the repository for use within your Unity projects. License MIT © David Knopp"
  },
  "index.html": {
    "href": "index.html",
    "title": "Atlas 👩‍🚀 | Atlas",
    "keywords": "Atlas 👩‍🚀 A C# utility and helper library for Unity. Check out the documentation for a more detailed api reference and guides. Summary Atlas is a library of reusable classes and tools designed to jump-start your Unity project by providing solutions for common tasks, and extending/augmenting the features of Unity and C#. Feature Overview Game view debug drawing Easing Inspector attributes Timers Singletons Signals Effect emitters State machines Editor helpers UI stack Installation Import using the Package Manager (Unity 2019.1+) Add \"com.davidknopp.atlas\": \"https://github.com/david-knopp/Atlas.git#ReleasePackage\", under the \"dependencies\" section of your project's manifest.json file, which should be located under the \"Packages\" folder in your project's root directory. Upon running Unity, Atlas should then be downloaded automatically. Note: to use this method, Git must be installed on the user machine and the Git executable path should be listed in the PATH system environment variable as explained on the Unity forum . Import the Unity Package Download the latest .unitypackage from the releases page . Then, simply drag and drop the package into your Unity project. In an effort to keep your project tidy, Atlas will place itself in Assets/ThirdParty/Atlas/ , but can be moved freely afterward, as nothing within the library depends upon this directory. Copy/paste the source folders Download or clone the latest master branch, then copy the assets contained at Assets/Scripts/ of the Atlas project into your Unity project. Mix & Match Many of the files & classes contained within Atlas are modular and can be used on their own without any other dependencies. Therefore, individual files can be taken at will from the repository for use within your Unity projects. License MIT © David Knopp"
  }
}